/**
 * –£–ú–ù–´–ô –¢–ê–ö–°–û–ü–ê–†–ö - –û–°–ù–û–í–ù–û–ô JAVASCRIPT
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å–∞–π—Ç–∞ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞ —Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º (OpenRouter API)
 */

// –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞ - –°–æ–±—ã—Ç–∏–π–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
function trackEvent(eventName, params = {}) {
    if (typeof ym !== 'undefined') {
        ym(101852978, 'reachGoal', eventName, params);
        console.log('YM Event tracked:', eventName, params);
    }
}

// SEO Events tracking functions
function trackPhoneClick() {
    trackEvent('PHONE_CLICK', {
        'phone_number': '+7-927-374-81-51',
        'source': 'website'
    });
}

function trackChatOpen() {
    trackEvent('CHAT_OPEN', {
        'chat_type': 'ai_consultant',
        'source': 'website'
    });
}

function trackSignupClick() {
    const section = document.activeElement.closest('section');
    trackEvent('SIGNUP_CLICK', {
        'button_location': section ? section.id || 'unknown' : 'unknown',
        'source': 'website'
    });
}

function trackCalculatorUse() {
    trackEvent('CALCULATOR_USE', {
        'tool': 'earnings_calculator',
        'source': 'website'
    });
}

function trackManagerTransfer() {
    trackEvent('MANAGER_TRANSFER', {
        'from': 'ai_chat',
        'to': 'human_manager'
    });
}

function trackFormSubmit(formType) {
    trackEvent('FORM_SUBMIT', {
        'form_type': formType,
        'source': 'website'
    });
}

function trackSectionView(sectionName) {
    trackEvent('SECTION_VIEW', {
        'section': sectionName,
        'source': 'website'
    });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let chatWidget = null;
let chatToggle = null;
let chatBody = null;
let chatInput = null;
let isTyping = false;
let websocket = null;
let sessionId = null;
let reconnectAttempts = 0;
const maxReconnectAttempts = 5;
let heartbeatInterval = null;
let connectionCheckInterval = null;
let lastHeartbeat = null;
let touchStartY = 0;
let touchEndY = 0;
let isMobile = window.innerWidth < 768;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeElements();
    initializeEventListeners();
    initializePhoneMask();
    initializeFormValidation();
    initializeAnimations();
    initializeNavigation();

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–∞–π–ø–µ—Ä–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    // if (isMobile) {
    //     setTimeout(() => {
    //         initBenefitsSwiper();
    //         initReviewsSwiper();
    //     }, 100);
    // } else {
    //     initBenefitsSwiper();
    //     initReviewsSwiper();
    // }

    initProcessTabs();
    initCounterAnimations();
    initScrollAnimations();
    initScrollToTop();
    initShrinkHeader();
    initPageVisibilityHandling();
    initChatSwipeGestures();

    console.log('üöÄ ILPO-TAXI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å OpenRouter AI');
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
 */
function initializeElements() {
    chatWidget = document.getElementById('chatWidget');
    chatToggle = document.getElementById('chatToggle');
    chatBody = document.getElementById('chatBody');
    chatInput = document.getElementById('chatInput');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function initializeEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const quickRegForm = document.getElementById('quickRegForm');
    if (quickRegForm) {
        quickRegForm.addEventListener('submit', handleQuickRegistration);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ —á–∞—Ç–µ
    if (chatInput) {
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –ø–æ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && chatWidget && chatWidget.classList.contains('open')) {
            closeChat();
        }
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    window.addEventListener('resize', function() {
        isMobile = window.innerWidth < 768;
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø-–∂–µ—Å—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
 */
function initChatSwipeGestures() {
    if (!chatWidget || !chatWidget.querySelector('.chat-header')) return;

    const chatHeader = document.querySelector('.chat-header');

    if (chatHeader) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–≤–∞–π–ø–∞ –≤–Ω–∏–∑ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —á–∞—Ç–∞
        chatHeader.addEventListener('touchstart', handleTouchStart, { passive: true });
        chatHeader.addEventListener('touchmove', handleTouchMove, { passive: false });
        chatHeader.addEventListener('touchend', handleTouchEnd, { passive: true });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –¥–ª—è –≤—Å–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞
    chatWidget.addEventListener('touchstart', handleTouchStart, { passive: true });
    chatWidget.addEventListener('touchmove', handleTouchMove, { passive: false });
    chatWidget.addEventListener('touchend', handleTouchEnd, { passive: true });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–≤–∞–π–ø-–∂–µ—Å—Ç–æ–≤
 */
function handleTouchStart(event) {
    touchStartY = event.touches[0].clientY;
}

function handleTouchMove(event) {
    if (!chatWidget.classList.contains('open')) return;

    touchEndY = event.touches[0].clientY;
    const touchDiff = touchEndY - touchStartY;

    // –ï—Å–ª–∏ —Å–≤–∞–π–ø –≤–Ω–∏–∑ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —á–∞—Ç–∞
    if (touchDiff > 0 && touchStartY < 150) {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
        event.preventDefault();

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "—Ç—è–Ω—É—â–µ–≥–æ—Å—è" —á–∞—Ç–∞
        const translateY = Math.min(touchDiff * 0.5, 200);
        chatWidget.style.transform = `translateY(${translateY}px)`;
        chatWidget.style.opacity = 1 - (translateY / 400);
    }
}

function handleTouchEnd(event) {
    if (!chatWidget.classList.contains('open')) return;

    const touchDiff = touchEndY - touchStartY;

    // –ï—Å–ª–∏ —Å–≤–∞–π–ø –±—ã–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
    if (touchDiff > 100 && touchStartY < 150) {
        closeChat();
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    chatWidget.style.transition = 'transform 0.3s ease, opacity 0.3s ease';
    chatWidget.style.transform = '';
    chatWidget.style.opacity = '';

    // –£–±–∏—Ä–∞–µ–º transition –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        chatWidget.style.transition = '';
    }, 300);
}

/**
 * –ß–ê–¢-–í–ò–î–ñ–ï–¢ –° WEBSOCKET –ò OPENROUTER API
 */

// –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
function openChat() {
    if (!chatWidget || !chatToggle) return;

    // –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
    trackChatOpen();

    chatWidget.classList.add('open');
    chatToggle.classList.add('hidden');

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    if (isMobile) {
        document.body.style.overflow = 'hidden';
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (!websocket || websocket.readyState === WebSocket.CLOSED) {
        connectWebSocket();
    }

    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
        if (chatInput) chatInput.focus();

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑
        if (chatBody) {
            chatBody.scrollTop = chatBody.scrollHeight;
        }
    }, 300);

    trackEvent('chat_opened');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
function closeChat() {
    if (!chatWidget || !chatToggle) return;

    chatWidget.classList.remove('open');
    chatToggle.classList.remove('hidden');

    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    if (isMobile) {
        document.body.style.overflow = '';
    }

    // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞, –Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    // stopHeartbeat();

    trackEvent('chat_closed');
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
function connectWebSocket() {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}/ws/chat${sessionId ? '?session_id=' + sessionId : ''}`;

    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:', wsUrl);

    websocket = new WebSocket(wsUrl);

    websocket.onopen = function(event) {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        reconnectAttempts = 0;
        showConnectionStatus('connected');
        startHeartbeat();
    };

    websocket.onmessage = function(event) {
        const data = JSON.parse(event.data);
        handleWebSocketMessage(data);
    };

    websocket.onclose = function(event) {
        console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', event.code, event.reason);
        showConnectionStatus('disconnected');
        stopHeartbeat();

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        if (reconnectAttempts < maxReconnectAttempts) {
            reconnectAttempts++;
            showConnectionStatus('reconnecting');
            const delay = Math.min(2000 * Math.pow(2, reconnectAttempts - 1), 30000); // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay/1000}—Å`);
            setTimeout(() => connectWebSocket(), delay);
        } else {
            console.log('üíî –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            showErrorMessage('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            showReconnectButton();
        }
    };

    websocket.onerror = function(error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
        showConnectionStatus('error');
        stopHeartbeat();
    };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket
function handleWebSocketMessage(data) {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (data.content && data.content.length > 1000) {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${data.content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`üîç –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:`, data.content.substring(0, 200));
        console.log(`üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:`, data.content.substring(data.content.length - 200));
    }

    switch (data.type) {
        case 'ai_message':
            hideTypingIndicator();
            addMessage(data.content, 'ai', {
                timestamp: data.timestamp,
                intent: data.intent,
                processing_time: data.processing_time,
                model: data.model
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id
            if (data.session_id) {
                sessionId = data.session_id;
            }
            break;

        case 'manager_message':
            hideTypingIndicator();
            addMessage(data.content, 'manager', {
                timestamp: data.timestamp,
                sender_name: data.sender_name,
                chat_id: data.chat_id
            });
            break;

        case 'system_message':
            hideTypingIndicator();
            addMessage(data.content, 'system', {
                timestamp: data.timestamp
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ò–ò
            if (data.chat_status === 'ai_mode') {
                updateChatStatus('ai', '–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–Ω–æ–≤–∞
                showTransferToManagerButton();
            }
            break;

        case 'typing':
            showTypingIndicator();
            break;

        case 'pong':
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ heartbeat
            lastHeartbeat = Date.now();
            console.log('üíì Heartbeat –ø–æ–ª—É—á–µ–Ω');
            break;

        case 'error':
            hideTypingIndicator();
            showErrorMessage('–û—à–∏–±–∫–∞: ' + data.content);
            break;

        default:
            console.log('ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (heartbeat)
function startHeartbeat() {
    stopHeartbeat(); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    heartbeatInterval = setInterval(() => {
        if (websocket && websocket.readyState === WebSocket.OPEN) {
            websocket.send(JSON.stringify({
                type: 'ping',
                timestamp: new Date().toISOString()
            }));
            lastHeartbeat = Date.now();
        }
    }, 30000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    connectionCheckInterval = setInterval(() => {
        checkConnection();
    }, 5000);
}

function stopHeartbeat() {
    if (heartbeatInterval) {
        clearInterval(heartbeatInterval);
        heartbeatInterval = null;
    }
    if (connectionCheckInterval) {
        clearInterval(connectionCheckInterval);
        connectionCheckInterval = null;
    }
}

function checkConnection() {
    if (!websocket) return;

    // –ï—Å–ª–∏ WebSocket –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CONNECTING —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
    if (websocket.readyState === WebSocket.CONNECTING) {
        const now = Date.now();
        if (!lastHeartbeat || (now - lastHeartbeat) > 60000) { // 1 –º–∏–Ω—É—Ç–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
            console.log('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–ª–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è');
            websocket.close();
        }
    }

    // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –Ω–æ –º—ã —ç—Ç–æ–≥–æ –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏
    if (websocket.readyState === WebSocket.CLOSED && !reconnectAttempts) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è');
        connectWebSocket();
    }
}

function showReconnectButton() {
    const statusDiv = document.querySelector('.chat-status');
    if (statusDiv) {
        statusDiv.innerHTML = `
            <span style="color: #FF9500; cursor: pointer;" onclick="forceReconnect()">
                üü° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            </span>
        `;
    }
}

function forceReconnect() {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    stopHeartbeat();
    if (websocket) {
        websocket.close();
    }
    connectWebSocket();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
function sendMessage() {
    const message = chatInput.value.trim();
    if (!message || isTyping) return;

    if (!websocket || websocket.readyState !== WebSocket.OPEN) {
        showErrorMessage('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage(message, 'user');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
    websocket.send(JSON.stringify({
        type: 'user_message',
        content: message,
        timestamp: new Date().toISOString()
    }));

    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    chatInput.value = '';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(() => {
        showTypingIndicator();
    }, 300);

    trackEvent('message_sent', {
        message_length: message.length,
        session_id: sessionId
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(content, sender, metadata = {}) {
    if (!chatBody) return;

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üì® –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
        sender: sender,
        contentLength: content.length,
        content: content,
        metadata: metadata
    });

    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${sender}-message`;

    if (sender === 'ai' && metadata.intent) {
        messageDiv.setAttribute('data-intent', metadata.intent);
        messageDiv.setAttribute('data-sender', 'ai');
    } else if (sender === 'manager') {
        messageDiv.setAttribute('data-sender', 'manager');
        messageDiv.setAttribute('data-chat-id', metadata.chat_id || '');
    } else if (sender === 'system') {
        messageDiv.setAttribute('data-sender', 'system');
    }

    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ò–ò –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if (sender === 'ai' || sender === 'manager') {
        messageContent.innerHTML = convertMarkdownToHTML(content);
    } else {
        messageContent.textContent = content;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if (sender === 'manager' && metadata.sender_name) {
        const senderLabel = document.createElement('div');
        senderLabel.className = 'sender-label';
        senderLabel.textContent = `üë®‚Äçüíº ${metadata.sender_name}`;
        messageDiv.appendChild(senderLabel);
    }

    messageDiv.appendChild(messageContent);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
    const messageTime = document.createElement('div');
    messageTime.className = 'message-time';

    const now = new Date();
    const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    messageTime.textContent = timeString;

    messageDiv.appendChild(messageTime);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    chatBody.appendChild(messageDiv);

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑
    chatBody.scrollTop = chatBody.scrollHeight;

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        messageDiv.classList.add('animate-in');
    }, 10);

    // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    if ((sender === 'ai' || sender === 'manager') && isMobile && window.navigator && window.navigator.vibrate) {
        window.navigator.vibrate(50);
    }

    return messageDiv;
}

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML
function convertMarkdownToHTML(text) {
    let html = text;

    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–æ–≤
    const lines = html.split('\n');
    let resultLines = [];
    let inList = false;

    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–ø–∏—Å–∫–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å * –Ω–æ –Ω–µ **)
        if (line.match(/^\*\s+(.+)$/) && !line.includes('<strong>')) {
            if (!inList) {
                resultLines.push('<ul>');
                inList = true;
            }
            const listContent = line.replace(/^\*\s+(.+)$/, '$1');
            resultLines.push(`<li>${listContent}</li>`);
        } else {
            // –ï—Å–ª–∏ –º—ã –±—ã–ª–∏ –≤ —Å–ø–∏—Å–∫–µ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if (inList) {
                resultLines.push('</ul>');
                inList = false;
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π)
            if (line.length > 0) {
                resultLines.push(`<p>${line}</p>`);
            } else if (!inList) {
                resultLines.push('<br>');
            }
        }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º
    if (inList) {
        resultLines.push('</ul>');
    }

    html = resultLines.join('');

    // –ö—É—Ä—Å–∏–≤ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è —Å–ø–∏—Å–∫–∏ –∏ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
    html = html.replace(/\*([^*\n<>]+?)\*/g, '<em>$1</em>');

    // –°—Å—ã–ª–∫–∏ [text](url)
    html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ <p></p>
    html = html.replace(/<p><\/p>/g, '');

    console.log('Converted HTML:', html); // –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞

    return html;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
function showTypingIndicator() {
    if (isTyping) return;

    isTyping = true;
    const typingDiv = document.createElement('div');
    typingDiv.className = 'chat-message ai-message typing-indicator';
    typingDiv.innerHTML = `
        <div class="message-content">
            <span class="typing-dots">
                <span></span><span></span><span></span>
            </span>
            –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–µ—á–∞—Ç–∞–µ—Ç...
        </div>
    `;
    chatBody.appendChild(typingDiv);
    chatBody.scrollTop = chatBody.scrollHeight;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    setTimeout(() => {
        if (typingDiv && typingDiv.parentNode) {
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–∏–º
            chatBody.scrollTop = chatBody.scrollHeight;
        }
    }, 100);
}

// –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
function hideTypingIndicator() {
    isTyping = false;
    const typingIndicator = chatBody.querySelector('.typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function showConnectionStatus(status) {
    const statusMap = {
        'connected': { text: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É', color: '#34C759', icon: 'üü¢' },
        'disconnected': { text: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', color: '#FF9500', icon: 'üü°' },
        'error': { text: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', color: '#FF3B30', icon: 'üî¥' },
        'reconnecting': { text: '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', color: '#007AFF', icon: 'üîÑ' }
    };

    const statusInfo = statusMap[status];
    if (!statusInfo) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ
    const statusDiv = document.querySelector('.chat-status') || document.createElement('div');
    statusDiv.className = `chat-status ${status === 'reconnecting' ? 'reconnecting' : ''}`;
    statusDiv.innerHTML = `
        <span style="color: ${statusInfo.color}">
            ${statusInfo.icon} ${statusInfo.text}
        </span>
    `;

    if (!document.querySelector('.chat-status')) {
        const chatHeader = chatWidget ? chatWidget.querySelector('.chat-header') : null;
        if (chatHeader) {
            chatHeader.appendChild(statusDiv);
        }
    }

    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ —ç—Ç–æ —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (status === 'connected') {
        setTimeout(() => {
            statusDiv.style.opacity = '0';
            setTimeout(() => {
                if (statusDiv.parentNode) {
                    statusDiv.remove();
                }
            }, 300);
        }, 3000);
    }
}

/**
 * –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ó–ê–†–ê–ë–û–¢–ö–ê
 * –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å calculator.js
 */

/**
 * –ú–ê–°–ö–ê –î–õ–Ø –¢–ï–õ–ï–§–û–ù–ê
 */
function initializePhoneMask() {
    const phoneInput = document.getElementById('phone');
    if (!phoneInput) return;

    phoneInput.addEventListener('input', function(e) {
        let value = e.target.value.replace(/\D/g, '');

        if (value.length > 0) {
            if (value[0] !== '7') {
                value = '7' + value;
            }

            let formattedValue = '+7 ';
            if (value.length > 1) formattedValue += '(' + value.substring(1, 4);
            if (value.length >= 5) formattedValue += ') ' + value.substring(4, 7);
            if (value.length >= 8) formattedValue += '-' + value.substring(7, 9);
            if (value.length >= 10) formattedValue += '-' + value.substring(9, 11);

            e.target.value = formattedValue;
        }
    });

    phoneInput.addEventListener('keydown', function(e) {
        if (e.key === 'Backspace' && e.target.value === '+7 (') {
            e.target.value = '';
        }
    });
}

/**
 * –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú
 */
function initializeFormValidation() {
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function(e) {
            if (!validateForm(form)) {
                e.preventDefault();
            }
        });
    });
}

function validateForm(form) {
    let isValid = true;
    const inputs = form.querySelectorAll('input[required], select[required]');

    inputs.forEach(input => {
        if (!input.value.trim()) {
            showFieldError(input, '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            isValid = false;
        } else if (input.type === 'tel' && !isValidPhone(input.value)) {
            showFieldError(input, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
            isValid = false;
        } else {
            clearFieldError(input);
        }
    });

    return isValid;
}

function isValidPhone(phone) {
    const phoneRegex = /^\+7 \(\d{3}\) \d{3}-\d{2}-\d{2}$/;
    return phoneRegex.test(phone);
}

function showFieldError(input, message) {
    clearFieldError(input);

    input.classList.add('is-invalid');
    const errorDiv = document.createElement('div');
    errorDiv.className = 'invalid-feedback';
    errorDiv.textContent = message;
    input.parentNode.appendChild(errorDiv);
}

function clearFieldError(input) {
    input.classList.remove('is-invalid');
    const errorDiv = input.parentNode.querySelector('.invalid-feedback');
    if (errorDiv) {
        errorDiv.remove();
    }
}

/**
 * –û–ë–†–ê–ë–û–¢–ö–ê –§–û–†–ú–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
 */
function handleQuickRegistration(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const data = {
        name: formData.get('name') || document.getElementById('name').value,
        phone: formData.get('phone') || document.getElementById('phone').value,
        role: formData.get('role') || document.getElementById('role').value,
        agreement: document.getElementById('agreement').checked
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å)
    setTimeout(() => {
        showSuccessMessage('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.');
        e.target.reset();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        setTimeout(() => {
            openChat();
            addMessage(`–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É, ${data.name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.`, 'ai');
        }, 2000);

        trackEvent('registration_submitted', data);
    }, 2000);
}

/**
 * –ê–ù–ò–ú–ê–¶–ò–ò
 */
function initializeAnimations() {
    // Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.animationDelay = `${Math.random() * 0.3}s`;
                entry.target.classList.add('animate-in');
            }
        });
    }, observerOptions);

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    document.querySelectorAll('.benefit-card, .review-card, .process-step').forEach(el => {
        observer.observe(el);
    });
}

/**
 * –£–¢–ò–õ–ò–¢–´
 */

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
function showSuccessMessage(message) {
    const toast = document.createElement('div');
    toast.className = 'toast-message success';
    toast.innerHTML = `
        <div class="toast-content">
            <span class="toast-icon">‚úÖ</span>
            <span class="toast-text">${message}</span>
        </div>
    `;

    document.body.appendChild(toast);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç
    setTimeout(() => toast.classList.add('show'), 100);

    // –£–±–∏—Ä–∞–µ–º —Ç–æ—Å—Ç
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 5000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
function showErrorMessage(message) {
    const toast = document.createElement('div');
    toast.className = 'toast-message error';
    toast.innerHTML = `
        <div class="toast-content">
            <span class="toast-icon">‚ùå</span>
            <span class="toast-text">${message}</span>
        </div>
    `;

    document.body.appendChild(toast);

    setTimeout(() => toast.classList.add('show'), 100);
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 5000);
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
function trackEvent(eventName, eventData = {}) {
    console.log(`üìä Event: ${eventName}`, eventData);

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Google Analytics, –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫—É –∏ —Ç.–¥.
    // gtag('event', eventName, eventData);
    // ym(COUNTER_ID, 'reachGoal', eventName, eventData);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–æ—Å—Ç–æ–≤
const toastStyles = `
    .toast-message {
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        padding: 16px 20px;
        z-index: 10000;
        transform: translateX(400px);
        transition: transform 0.3s ease;
        max-width: 400px;
    }
    
    .toast-message.show {
        transform: translateX(0);
    }
    
    .toast-message.success {
        border-left: 4px solid #34C759;
    }
    
    .toast-message.error {
        border-left: 4px solid #FF3B30;
    }
    
    .toast-content {
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .toast-icon {
        font-size: 18px;
    }
    
    .toast-text {
        color: #21201F;
        font-weight: 500;
    }
    
    .animate-in {
        animation: fadeInUp 0.6s ease-out forwards;
    }
    
    .typing-dots {
        display: inline-flex;
        gap: 4px;
        margin-right: 8px;
    }
    
    .typing-dots span {
        width: 4px;
        height: 4px;
        background: #FFDB4D;
        border-radius: 50%;
        animation: typing 1.4s infinite ease-in-out;
    }
    
    .typing-dots span:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .typing-dots span:nth-child(3) {
        animation-delay: 0.4s;
    }
    
    @keyframes typing {
        0%, 80%, 100% {
            transform: scale(0.8);
            opacity: 0.5;
        }
        40% {
            transform: scale(1);
            opacity: 1;
        }
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head
const styleSheet = document.createElement('style');
styleSheet.textContent = toastStyles;
document.head.appendChild(styleSheet);

/**
 * –ù–ê–í–ò–ì–ê–¶–ò–Ø –ò –°–ö–†–û–õ–õ –≠–§–§–ï–ö–¢–´
 */
function initializeNavigation() {
    const header = document.querySelector('.header-nav');
    const navLinks = document.querySelectorAll('.nav-link[href^="#"]');

    // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —à–∞–ø–∫–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    window.addEventListener('scroll', function() {
        if (window.scrollY > 100) {
            if (header) header.classList.add('scrolled');
        } else {
            if (header) header.classList.remove('scrolled');
        }
    });

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–µ–∫—Ü–∏—è–º
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);

            if (targetSection && header) {
                const headerHeight = header.offsetHeight;
                const targetPosition = targetSection.offsetTop - headerHeight - 30;

                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.openChat = openChat;
window.closeChat = closeChat;
window.sendMessage = sendMessage;
window.forceReconnect = forceReconnect;

/* =============================================================================
   –ù–û–í–´–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø BENEFITS –ò PROCESS
   ============================================================================= */

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Swiper
function initSwiper(containerSelector, config) {
    const swiperInstance = new Swiper(containerSelector, {
        // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        loop: true,
        speed: 600,
        grabCursor: true,
        watchOverflow: true,

        // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        autoplay: {
            delay: 4500,
            disableOnInteraction: false, // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±—É–¥–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            pauseOnMouseEnter: true, // –ü–∞—É–∑–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
        },

        // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        preloadImages: false,
        lazy: true,

        // –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (slidesPerView, breakpoints, pagination, navigation)
        ...config,

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        roundLengths: true,

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å touch-—Å–æ–±—ã—Ç–∏—è–º–∏
        touchRatio: 1,
        touchAngle: 45,
        simulateTouch: true, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–µ—Å–∫—Ç–æ–ø–æ–º
        allowTouchMove: true,

        // –£–±–∏—Ä–∞–µ–º —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ autoplay, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
        on: {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –±–µ–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è autoplay
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (window.innerWidth < 768) {
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                swiperInstance.update();
            }, 150);
        });
    }
}

// –í—ã–∑–æ–≤ DOMContentLoaded
document.addEventListener('DOMContentLoaded', () => {
    const isMobile = window.innerWidth < 768;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–≤–∞–π–ø–µ—Ä–∞ "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"
    initSwiper('.benefits-swiper', {
        slidesPerView: 1,
        spaceBetween: 20,
        pagination: {
            el: '.benefits-pagination',
            clickable: true,
            dynamicBullets: true,
        },
        navigation: {
            nextEl: '.benefits-next',
            prevEl: '.benefits-prev',
        },
        breakpoints: {
            480: { slidesPerView: 1, spaceBetween: 20 },
            768: { slidesPerView: 2, spaceBetween: 25 },
            1024: { slidesPerView: 2, spaceBetween: 30 },
            1200: { slidesPerView: 3, spaceBetween: 30 }
        }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–≤–∞–π–ø–µ—Ä–∞ "–û—Ç–∑—ã–≤—ã"
    initSwiper('.reviews-swiper', {
        slidesPerView: 1,
        spaceBetween: 20,
        pagination: {
            el: '.reviews-pagination',
            clickable: true,
            dynamicBullets: true,
        },
        navigation: {
            nextEl: '.reviews-next',
            prevEl: '.reviews-prev',
        },
        breakpoints: {
            480: { slidesPerView: 1, spaceBetween: 20 },
            768: { slidesPerView: 2, spaceBetween: 25 },
            1024: { slidesPerView: 2, spaceBetween: 30 },
            1200: { slidesPerView: 3, spaceBetween: 30 }
        }
    });

    initProcessTabs();
    initCounterAnimations();
    initScrollAnimations();
    initScrollToTop();
    initShrinkHeader();
    initPageVisibilityHandling();
    initChatSwipeGestures();

    console.log('üöÄ ILPO-TAXI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å OpenRouter AI');
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤ –≤ Process —Å–µ–∫—Ü–∏–∏
function initProcessTabs() {
    const roleTabs = document.querySelectorAll('.role-tab');
    const processContents = document.querySelectorAll('.process-content');

    roleTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            const targetRole = this.dataset.role;

            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
            roleTabs.forEach(t => t.classList.remove('active'));
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–∞–±—É
            this.classList.add('active');

            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã
            processContents.forEach(content => {
                content.style.display = 'none';
                content.style.opacity = '0';
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            const targetContent = document.getElementById(`${targetRole}-process`);
            if (targetContent) {
                targetContent.style.display = 'block';
                setTimeout(() => {
                    targetContent.style.opacity = '1';
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —à–∞–≥–æ–≤
                    animateTimelineSteps(targetContent);
                }, 50);
            }
        });
    });
}

// –ê–Ω–∏–º–∞—Ü–∏—è —à–∞–≥–æ–≤ –≤ —Ç–∞–π–º–ª–∞–π–Ω–µ
function animateTimelineSteps(container) {
    const steps = container.querySelectorAll('.timeline-step');
    steps.forEach((step, index) => {
        step.style.opacity = '0';
        step.style.transform = 'translateY(30px)';

        setTimeout(() => {
            step.style.transition = 'all 0.6s ease-out';
            step.style.opacity = '1';
            step.style.transform = 'translateY(0)';
        }, index * 200);
    });
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
function initCounterAnimations() {
    const counters = document.querySelectorAll('.stat-number[data-count]');
    const options = {
        threshold: 0.5,
        rootMargin: '0px 0px -100px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                animateCounter(entry.target);
                observer.unobserve(entry.target);
            }
        });
    }, options);

    counters.forEach(counter => observer.observe(counter));
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞
function animateCounter(element) {
    const target = parseInt(element.dataset.count);
    const duration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
    const increment = target / (duration / 16); // 60 FPS
    let current = 0;

    const updateCounter = () => {
        current += increment;
        if (current < target) {
            element.textContent = Math.floor(current).toLocaleString();
            requestAnimationFrame(updateCounter);
        } else {
            element.textContent = target.toLocaleString();
        }
    };

    updateCounter();
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initScrollAnimations() {
    const animateElements = document.querySelectorAll('.benefit-card-modern, .timeline-step, .stat-item');
    const options = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
                const siblings = Array.from(entry.target.parentElement.children);
                const index = siblings.indexOf(entry.target);
                entry.target.style.transitionDelay = `${index * 0.1}s`;
            }
        });
    }, options);

    animateElements.forEach(element => {
        element.style.opacity = '0';
        element.style.transform = 'translateY(30px)';
        element.style.transition = 'opacity 0.6s ease-out, transform 0.6s ease-out';
        observer.observe(element);
    });
}

// –≠—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function initParallaxEffects() {
    window.addEventListener('scroll', () => {
        const scrolled = window.pageYOffset;
        const parallaxElements = document.querySelectorAll('.benefits-modern::before, .process-modern::before');

        parallaxElements.forEach(element => {
            const speed = 0.5;
            element.style.transform = `translateY(${scrolled * speed}px)`;
        });
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç hover –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
function initCardHoverEffects() {
    const cards = document.querySelectorAll('.benefit-card-modern, .step-content');

    cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });

        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
document.addEventListener('DOMContentLoaded', function() {
    initParallaxEffects();
    initCardHoverEffects();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
    const sections = document.querySelectorAll('.benefits-modern, .process-modern');
    sections.forEach(section => {
        section.style.opacity = '0';
        section.style.transform = 'translateY(50px)';
        section.style.transition = 'opacity 1s ease-out, transform 1s ease-out';
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => {
        sections.forEach((section, index) => {
            setTimeout(() => {
                section.style.opacity = '1';
                section.style.transform = 'translateY(0)';
            }, index * 300);
        });
    }, 500);
});

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫ –∫–Ω–æ–ø–∫–∞–º CTA
function initCTAButtons() {
    const ctaButtons = document.querySelectorAll('.pulse-btn');

    ctaButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç ripple
            const ripple = document.createElement('span');
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;

            ripple.style.width = ripple.style.height = size + 'px';
            ripple.style.left = x + 'px';
            ripple.style.top = y + 'px';
            ripple.classList.add('ripple-effect');

            this.appendChild(ripple);

            setTimeout(() => {
                ripple.remove();
            }, 600);
        });
    });
}

/**
 * SCROLL TO TOP WIDGET
 */
function initScrollToTop() {
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞–≤–µ—Ä—Ö
    const scrollButton = document.createElement('button');
    scrollButton.className = 'scroll-to-top';
    scrollButton.innerHTML = '‚Üë';
    scrollButton.setAttribute('aria-label', '–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –Ω–∞–≤–µ—Ä—Ö');
    scrollButton.setAttribute('title', '–ù–∞–≤–µ—Ä—Ö');

    document.body.appendChild(scrollButton);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    let scrollTimeout;
    window.addEventListener('scroll', function() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

        if (scrollTop > 300) {
            scrollButton.classList.add('visible');
        } else {
            scrollButton.classList.remove('visible');
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
        }, 100);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    scrollButton.addEventListener('click', function() {
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞–≤–µ—Ä—Ö
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });

        // –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è
        trackEvent('scroll_to_top_clicked');
    });
}

/**
 * SHRINK HEADER ON SCROLL
 */
function initShrinkHeader() {
    const header = document.querySelector('.header-nav');
    if (!header) return;

    let lastScrollTop = 0;
    let scrollTimeout;

    window.addEventListener('scroll', function() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å scrolled –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–Ω–∏–∑
        if (scrollTop > 100) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }

        // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–ø–∫—É –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Å–∫—Ä–æ–ª–ª–µ
        if (scrollTop > 200) {
            if (scrollTop > lastScrollTop && scrollTop > 300) {
                // –°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ - —Å–∫—Ä—ã–≤–∞–µ–º —à–∞–ø–∫—É
                header.classList.add('hidden');
            } else {
                // –°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–ø–∫—É
                header.classList.remove('hidden');
            }
        } else {
            // –í –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–ø–∫—É
            header.classList.remove('hidden');
        }

        lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫—Ä–æ–ª–ª–∞
            if (header.classList.contains('hidden') && scrollTop < 200) {
                header.classList.remove('hidden');
            }
        }, 150);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–ø–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –º—ã—à–∏ –≤ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
    document.addEventListener('mousemove', function(e) {
        if (e.clientY <= 80 && header.classList.contains('hidden')) {
            header.classList.remove('hidden');
        }
    });
}

// CSS –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
const rippleCSS = `
.ripple-effect {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.6);
    transform: scale(0);
    animation: ripple 0.6s linear;
    pointer-events: none;
}

@keyframes ripple {
    to {
        transform: scale(4);
        opacity: 0;
    }
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è ripple —ç—Ñ—Ñ–µ–∫—Ç–∞
const style = document.createElement('style');
style.textContent = rippleCSS;
document.head.appendChild(style);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
function initPageVisibilityHandling() {
    document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –º–æ–∂–µ–º —Å–Ω–∏–∑–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É heartbeat
            console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞, —Å–Ω–∏–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å heartbeat');
        } else {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            if (websocket && websocket.readyState !== WebSocket.OPEN) {
                console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è');
                connectWebSocket();
            }
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CTA –∫–Ω–æ–ø–æ–∫
document.addEventListener('DOMContentLoaded', initCTAButtons);

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∂–∏–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async function requestManagerTransfer() {
    // –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    trackManagerTransfer();

    const transferBtn = document.getElementById('transferToManagerBtn');

    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    const clientData = await showClientDataForm();

    if (!clientData) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
        return;
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    transferBtn.disabled = true;
    transferBtn.innerHTML = '‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞...';

    try {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        addMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–¥–∫–ª—é—á–∞—é –∂–∏–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...', 'system');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/api/chat/transfer-to-manager', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                session_id: sessionId,
                chat_history: getChatHistory(),
                client_name: clientData.name,
                client_phone: clientData.phone
            })
        });

        const result = await response.json();

        if (result.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            window.managerChatId = result.chat_id;
            window.supportChatId = result.support_chat_id;

            addMessage(
                `üë§ **–ú–µ–Ω–µ–¥–∂–µ—Ä ${result.manager_name} –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n` +
                '–°–µ–π—á–∞—Å —Å –≤–∞–º–∏ –±—É–¥–µ—Ç –æ–±—â–∞—Ç—å—Å—è –∂–∏–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ILPO-TAXI. ' +
                '–û–Ω –ø–æ–º–æ–∂–µ—Ç —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∏ —Ä–∞–±–æ—Ç–µ.',
                'system'
            );

            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            transferBtn.style.display = 'none';

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
            updateChatStatus('manager', result.manager_name);

        } else {
            addMessage(
                result.message ||
                'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ.',
                'system'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            transferBtn.disabled = false;
            transferBtn.innerHTML = 'üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º';
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
        addMessage('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'system');

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        transferBtn.disabled = false;
        transferBtn.innerHTML = 'üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º';
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
function getChatHistory() {
    const messages = [];
    const chatMessages = document.querySelectorAll('.chat-message');

    chatMessages.forEach(msg => {
        const content = msg.querySelector('.message-content');
        const time = msg.querySelector('.message-time');
        const isAI = msg.classList.contains('ai-message');
        const isUser = msg.classList.contains('user-message');
        const isManager = msg.classList.contains('manager-message');
        const isSystem = msg.classList.contains('system-message');

        if (content && (isAI || isUser || isManager || isSystem)) {
            messages.push({
                role: isUser ? 'user' : (isAI ? 'assistant' : (isManager ? 'manager' : 'system')),
                content: content.textContent,
                timestamp: time ? time.textContent : new Date().toLocaleTimeString()
            });
        }
    });

    return messages;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
function showClientDataForm() {
    return new Promise((resolve) => {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'modal fade show';
        modal.style.display = 'block';
        modal.style.backgroundColor = 'rgba(0,0,0,0.5)';
        modal.innerHTML = `
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-user-tie me-2"></i>
                            –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                        </h5>
                        <button type="button" class="btn-close" onclick="closeClientDataForm()"></button>
                    </div>
                    <div class="modal-body">
                        <p class="text-muted mb-4">
                            –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∂–∏–≤–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–º –Ω—É–∂–Ω–∞ –Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:
                        </p>
                        <form id="clientDataForm">
                            <div class="mb-3">
                                <label for="clientName" class="form-label">
                                    <i class="fas fa-user me-1"></i>
                                    –í–∞—à–µ –∏–º—è *
                                </label>
                                <input type="text" class="form-control" id="clientName" name="name" 
                                       placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–µ–∫—Å–µ–π" required maxlength="50">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="clientPhone" class="form-label">
                                    <i class="fas fa-phone me-1"></i>
                                    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *
                                </label>
                                <input type="tel" class="form-control" id="clientPhone" name="phone" 
                                       placeholder="+7 (999) 123-45-67" required>
                                <div class="invalid-feedback"></div>
                                <small class="form-text text-muted">
                                    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                                </small>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="closeClientDataForm()">
                            <i class="fas fa-times me-1"></i>
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="button" class="btn btn-primary" onclick="submitClientDataForm()">
                            <i class="fas fa-user-tie me-1"></i>
                            –ü–æ–¥–∫–ª—é—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å–∫—É –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const phoneInput = modal.querySelector('#clientPhone');
        initPhoneMaskForInput(phoneInput);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º resolve —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        window.clientDataFormResolve = resolve;

        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
        setTimeout(() => {
            modal.querySelector('#clientName').focus();
        }, 100);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        modal.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                submitClientDataForm();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeClientDataForm();
            }
        });
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
function closeClientDataForm() {
    const modal = document.querySelector('.modal.show');
    if (modal) {
        modal.remove();
    }
    if (window.clientDataFormResolve) {
        window.clientDataFormResolve(null);
        window.clientDataFormResolve = null;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
function submitClientDataForm() {
    const form = document.getElementById('clientDataForm');
    const nameInput = form.querySelector('#clientName');
    const phoneInput = form.querySelector('#clientPhone');

    let isValid = true;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if (!nameInput.value.trim()) {
        showFieldError(nameInput, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        isValid = false;
    } else if (nameInput.value.trim().length < 2) {
        showFieldError(nameInput, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤');
        isValid = false;
    } else {
        clearFieldError(nameInput);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!phoneInput.value.trim()) {
        showFieldError(phoneInput, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        isValid = false;
    } else if (!isValidPhone(phoneInput.value)) {
        showFieldError(phoneInput, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        isValid = false;
    } else {
        clearFieldError(phoneInput);
    }

    if (!isValid) {
        return;
    }

    // –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    const clientData = {
        name: nameInput.value.trim(),
        phone: phoneInput.value.trim()
    };

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    const modal = document.querySelector('.modal.show');
    if (modal) {
        modal.remove();
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if (window.clientDataFormResolve) {
        window.clientDataFormResolve(clientData);
        window.clientDataFormResolve = null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
function initPhoneMaskForInput(phoneInput) {
    if (!phoneInput) return;

    phoneInput.addEventListener('input', function(e) {
        let value = e.target.value.replace(/\D/g, '');

        if (value.length > 0) {
            if (value[0] !== '7') {
                value = '7' + value;
            }

            let formattedValue = '+7 ';
            if (value.length > 1) formattedValue += '(' + value.substring(1, 4);
            if (value.length >= 5) formattedValue += ') ' + value.substring(4, 7);
            if (value.length >= 8) formattedValue += '-' + value.substring(7, 9);
            if (value.length >= 10) formattedValue += '-' + value.substring(9, 11);

            e.target.value = formattedValue;
        }
    });

    phoneInput.addEventListener('keydown', function(e) {
        if (e.key === 'Backspace' && e.target.value === '+7 (') {
            e.target.value = '';
        }
    });
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
function updateChatStatus(status, managerName = '–ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç') {
    const chatHeader = document.querySelector('.chat-header .chat-info h5');
    const chatStatus = document.querySelector('.chat-header .chat-info .chat-status');

    if (status === 'manager') {
        if (chatHeader) chatHeader.textContent = `–ú–µ–Ω–µ–¥–∂–µ—Ä ${managerName}`;
        if (chatStatus) chatStatus.textContent = '–û–Ω–ª–∞–π–Ω';
    } else {
        if (chatHeader) chatHeader.textContent = '–ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç';
        if (chatStatus) chatStatus.textContent = '–û–Ω–ª–∞–π–Ω';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
function showTransferToManagerButton() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
    let transferBtn = document.getElementById('transferToManagerBtn');

    if (!transferBtn) {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ
        transferBtn = document.createElement('button');
        transferBtn.id = 'transferToManagerBtn';
        transferBtn.className = 'btn btn-outline-primary btn-sm mt-2';
        transferBtn.innerHTML = 'üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º';
        transferBtn.onclick = requestManagerTransfer;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —á–∞—Ç
        const chatInput = document.querySelector('.chat-input');
        if (chatInput) {
            chatInput.appendChild(transferBtn);
        }
    } else {
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
        transferBtn.style.display = 'block';
        transferBtn.disabled = false;
        transferBtn.innerHTML = 'üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º';
    }
}