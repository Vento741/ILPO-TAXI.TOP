#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∑–∞—è–≤–æ–∫
"""
import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv
load_dotenv()

from telegram_bot.services.manager_service import manager_service
from telegram_bot.config.settings import settings
from telegram_bot.models.support_models import ApplicationStatus

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_fixes():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    try:
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"ADMIN_IDS: {settings.ADMIN_IDS}")
        logger.info(f"MANAGER_IDS: {settings.MANAGER_IDS}")
        logger.info(f"NOTIFICATION_CHAT_ID: {settings.NOTIFICATION_CHAT_ID}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        test_telegram_id = 5161187711
        manager = await manager_service.get_manager_by_telegram_id(test_telegram_id)
        
        if manager:
            logger.info(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–π–¥–µ–Ω: {manager.first_name}, admin: {manager.is_admin}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫...")
            new_apps = await manager_service.get_available_new_applications(limit=5)
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {len(new_apps)}")
            
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
            manager_apps = await manager_service.get_manager_applications(test_telegram_id, limit=5)
            logger.info(f"üìã –ó–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {len(manager_apps)}")
            
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW...")
            new_status_apps = await manager_service.get_manager_applications(
                test_telegram_id, 
                status=ApplicationStatus.NEW, 
                limit=5
            )
            logger.info(f"üìã NEW –∑–∞—è–≤–æ–∫ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {len(new_status_apps)}")
            
        else:
            logger.warning(f"‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Å ID {test_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    asyncio.run(test_fixes()) 