"""
Chat Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ —á–∞—Ç–∞
–•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
"""

import json
import uuid
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import asyncio
from dataclasses import dataclass, asdict
import aiofiles

@dataclass
class ChatMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    role: str  # "user" –∏–ª–∏ "assistant"
    content: str
    timestamp: str
    message_id: str = None
    intent: str = None
    processing_time: float = None
    
    def __post_init__(self):
        if self.message_id is None:
            self.message_id = str(uuid.uuid4())
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()

@dataclass
class ChatSession:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    session_id: str
    user_id: str = None
    created_at: str = None
    last_activity: str = None
    messages: List[ChatMessage] = None
    context: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now().isoformat()
        if self.last_activity is None:
            self.last_activity = self.created_at
        if self.messages is None:
            self.messages = []
        if self.context is None:
            self.context = {}

class ChatManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —á–∞—Ç-—Å–µ—Å—Å–∏–π"""
    
    def __init__(self):
        self.sessions: Dict[str, ChatSession] = {}
        self.cleanup_interval = 3600  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        self.session_timeout = 86400  # –°–µ—Å—Å–∏—è –∂–∏–≤–µ—Ç 24 —á–∞—Å–∞
        self._cleanup_task = None  # –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏)"""
        if self._cleanup_task is None:
            self._cleanup_task = asyncio.create_task(self.cleanup_sessions())
            print("üßπ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π")
    
    async def create_session(self, user_id: str = None) -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
        session_id = str(uuid.uuid4())
        
        session = ChatSession(
            session_id=session_id,
            user_id=user_id or f"anonymous_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        
        self.sessions[session_id] = session
        
        print(f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —á–∞—Ç-—Å–µ—Å—Å–∏—è: {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {session.user_id}")
        
        return session_id
    
    async def get_session(self, session_id: str) -> Optional[ChatSession]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID"""
        session = self.sessions.get(session_id)
        
        if session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            session.last_activity = datetime.now().isoformat()
        
        return session
    
    async def add_message(self, session_id: str, role: str, content: str, **kwargs) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é"""
        session = await self.get_session(session_id)
        
        if not session:
            print(f"‚ùå –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –£–±–∏—Ä–∞–µ–º timestamp –∏–∑ kwargs –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        timestamp = kwargs.pop('timestamp', datetime.now().isoformat())
        
        message = ChatMessage(
            role=role,
            content=content,
            timestamp=timestamp,
            **kwargs
        )
        
        session.messages.append(message)
        session.last_activity = datetime.now().isoformat()
        
        print(f"üí¨ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é {session_id}: {role} - {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
    
    async def get_conversation_history(self, session_id: str, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        session = await self.get_session(session_id)
        
        if not session:
            return []
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è OpenRouter
        history = []
        for message in session.messages[-limit:]:
            history.append({
                "role": message.role,
                "content": message.content
            })
        
        return history
    
    async def update_context(self, session_id: str, context_update: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏"""
        session = await self.get_session(session_id)
        
        if not session:
            return False
        
        session.context.update(context_update)
        session.last_activity = datetime.now().isoformat()
        
        return True
    
    async def get_session_stats(self, session_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        session = await self.get_session(session_id)
        
        if not session:
            return {}
        
        user_messages = [msg for msg in session.messages if msg.role == "user"]
        ai_messages = [msg for msg in session.messages if msg.role == "assistant"]
        
        stats = {
            "session_id": session_id,
            "user_id": session.user_id,
            "created_at": session.created_at,
            "last_activity": session.last_activity,
            "total_messages": len(session.messages),
            "user_messages": len(user_messages),
            "ai_messages": len(ai_messages),
            "average_response_time": self._calculate_avg_response_time(ai_messages),
            "session_duration": self._calculate_session_duration(session),
            "context": session.context
        }
        
        return stats
    
    def _calculate_avg_response_time(self, ai_messages: List[ChatMessage]) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
        times = [msg.processing_time for msg in ai_messages if msg.processing_time]
        
        if not times:
            return 0.0
        
        return sum(times) / len(times)
    
    def _calculate_session_duration(self, session: ChatSession) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö"""
        created = datetime.fromisoformat(session.created_at)
        last_activity = datetime.fromisoformat(session.last_activity)
        
        duration = last_activity - created
        return duration.total_seconds() / 60
    
    async def cleanup_sessions(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        while True:
            try:
                await asyncio.sleep(self.cleanup_interval)
                
                current_time = datetime.now()
                sessions_to_remove = []
                
                for session_id, session in self.sessions.items():
                    last_activity = datetime.fromisoformat(session.last_activity)
                    age = (current_time - last_activity).total_seconds()
                    
                    if age > self.session_timeout:
                        sessions_to_remove.append(session_id)
                
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏
                for session_id in sessions_to_remove:
                    del self.sessions[session_id]
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
                
                if sessions_to_remove:
                    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {len(sessions_to_remove)} —Å–µ—Å—Å–∏–π. –û—Å—Ç–∞–ª–æ—Å—å: {len(self.sessions)}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π: {e}")
    
    async def export_session(self, session_id: str, filepath: str = None) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–∏ –≤ JSON —Ñ–∞–π–ª"""
        session = await self.get_session(session_id)
        
        if not session:
            return False
        
        if filepath is None:
            filepath = f"chat_session_{session_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON
            session_data = asdict(session)
            
            async with aiofiles.open(filepath, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(session_data, ensure_ascii=False, indent=2))
            
            print(f"üíæ –°–µ—Å—Å–∏—è {session_id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filepath}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    async def get_all_sessions_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º"""
        total_sessions = len(self.sessions)
        active_sessions = 0
        total_messages = 0
        
        current_time = datetime.now()
        
        for session in self.sessions.values():
            last_activity = datetime.fromisoformat(session.last_activity)
            if (current_time - last_activity).total_seconds() < 300:  # –ê–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                active_sessions += 1
            
            total_messages += len(session.messages)
        
        return {
            "total_sessions": total_sessions,
            "active_sessions": active_sessions,
            "total_messages": total_messages,
            "average_messages_per_session": total_messages / total_sessions if total_sessions > 0 else 0
        }

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if self._cleanup_task:
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass
            self._cleanup_task = None
            print("üõë –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
chat_manager = ChatManager() 