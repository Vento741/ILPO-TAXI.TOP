"""
–£–ú–ù–´–ô –¢–ê–ö–°–û–ü–ê–†–ö - –†–æ—É—Ç–µ—Ä—ã –¥–ª—è —á–∞—Ç–∞
WebSocket —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Å OpenRouter API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, HTTPException, Query
from fastapi.responses import JSONResponse
from datetime import datetime
from typing import Dict
from fastapi import Request
import json
import asyncio


# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from services.chat_manager import chat_manager
from services.openrouter_ai import OpenRouterAI
from telegram_bot.config.settings import settings

import logging
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —á–∞—Ç–∞
chat_router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OpenRouterAI (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
openrouter_ai: OpenRouterAI = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@chat_router.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-—Å–µ—Ä–≤–∏—Å–æ–≤...")
    await chat_manager.initialize()
    
    global openrouter_ai
    openrouter_ai = OpenRouterAI(
        api_key_consultant=settings.OPENROUTER_API_KEY_CONSULTANT,
        api_key_search=settings.OPENROUTER_API_KEY_SEARCH,
        base_url=settings.OPENROUTER_BASE_URL
    )
    print("‚úÖ –ß–∞—Ç-—Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
        self.connection_sessions: Dict[WebSocket, str] = {}  # –°–≤—è–∑—å –º–µ–∂–¥—É WebSocket –∏ session_id
    
    async def connect(self, websocket: WebSocket, session_id: str = None):
        await websocket.accept()
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        if not session_id:
            session_id = await chat_manager.create_session()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è —Å –¥–∞–Ω–Ω—ã–º ID
            existing_session = await chat_manager.get_session(session_id)
            if not existing_session:
                print(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
                session_id = await chat_manager.create_session()
        
        self.active_connections[session_id] = websocket
        self.connection_sessions[websocket] = session_id
        
        print(f"üîó –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}. –í—Å–µ–≥–æ: {len(self.active_connections)}")
        
        return session_id
    
    def disconnect(self, websocket: WebSocket):
        session_id = self.connection_sessions.get(websocket)
        if session_id and session_id in self.active_connections:
            del self.active_connections[session_id]
        if websocket in self.connection_sessions:
            del self.connection_sessions[websocket]
        
        print(f"‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}. –û—Å—Ç–∞–ª–æ—Å—å: {len(self.active_connections)}")
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        try:
            await websocket.send_text(message)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_to_session(self, session_id: str, message: str):
        websocket = self.active_connections.get(session_id)
        if websocket:
            await self.send_personal_message(message, websocket)
    
    async def broadcast(self, message: str):
        for websocket in self.active_connections.values():
            await self.send_personal_message(message, websocket)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
manager = ConnectionManager()

@chat_router.websocket("/ws/chat")
async def websocket_chat(websocket: WebSocket, session_id: str = Query(None)):
    """WebSocket endpoint –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    websocket.ping_timeout = 60  # –¢–∞–π–º–∞—É—Ç ping –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    websocket.ping_interval = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª ping –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º session_id
    session_id = await manager.connect(websocket, session_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = {
        "type": "ai_message",
        "content": "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ILPO-TAXI. –ü–æ–º–æ–≥—É —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏ –∏ –î–æ—Å—Ç–∞–≤–∫–µ. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "timestamp": datetime.now().isoformat(),
        "session_id": session_id,
        "model": "OpenRouter AI (gpt-4o-mini-search-preview)"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    await chat_manager.add_message(
        session_id, 
        "assistant", 
        welcome_message["content"],
        timestamp=welcome_message["timestamp"]
    )
    
    await manager.send_personal_message(json.dumps(welcome_message), websocket)
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            message_type = message_data.get("type", "")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if message_type == "ping":
                pong_message = {
                    "type": "pong",
                    "timestamp": datetime.now().isoformat()
                }
                await manager.send_personal_message(json.dumps(pong_message), websocket)
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if message_type != "user_message":
                continue
                
            user_message = message_data.get("content", "").strip()
            if not user_message:
                continue
            
            print(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ {session_id}: {user_message}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É
            from telegram_bot.services.manager_service import manager_service
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            web_chat_id = f"web_{session_id}"
            support_chat = await check_if_transferred_to_manager(session_id)
            
            if support_chat and support_chat.is_active:
                # –ß–∞—Ç –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await manager_service.send_message_to_manager(
                    chat_id=support_chat.chat_id,
                    message_text=user_message,
                    client_name=support_chat.client_name
                )
                
                if success:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                    await chat_manager.add_message(session_id, "user", user_message)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    confirmation_message = {
                        "type": "system_message",
                        "content": "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                        "timestamp": datetime.now().isoformat(),
                        "session_id": session_id
                    }
                    await manager.send_personal_message(json.dumps(confirmation_message), websocket)
                else:
                    # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    error_message = {
                        "type": "system_message",
                        "content": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        "timestamp": datetime.now().isoformat(),
                        "session_id": session_id
                    }
                    await manager.send_personal_message(json.dumps(error_message), websocket)
                
                continue  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ò–ò
            
            # –ß–∞—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –ò–ò
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            await chat_manager.add_message(session_id, "user", user_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
            typing_message = {
                "type": "typing",
                "content": "–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–µ—á–∞—Ç–∞–µ—Ç...",
                "timestamp": datetime.now().isoformat()
            }
            await manager.send_personal_message(json.dumps(typing_message), websocket)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conversation_history = await chat_manager.get_conversation_history(session_id, limit=10)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenRouter API
            ai_response_data = await openrouter_ai.get_smart_response(
                user_message, 
                context={
                    "session_id": session_id,
                    "conversation_history": conversation_history
                }
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_message = {
                "type": "ai_message",
                "content": ai_response_data["content"],
                "timestamp": ai_response_data["timestamp"],
                "intent": ai_response_data["intent"],
                "processing_time": ai_response_data["processing_time"],
                "model": ai_response_data["model"],
                "session_id": session_id
            }
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            content_length = len(ai_response_data["content"])
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {content_length} —Å–∏–º–≤–æ–ª–æ–≤")
            if content_length > 1000:
                print(f"üîç –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {ai_response_data['content'][:200]}...")
                print(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: ...{ai_response_data['content'][-200:]}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
            await chat_manager.add_message(
                session_id, 
                "assistant", 
                ai_response_data["content"],
                timestamp=ai_response_data["timestamp"],
                intent=ai_response_data["intent"],
                processing_time=ai_response_data["processing_time"]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                json_message = json.dumps(response_message, ensure_ascii=False)
                print(f"üì° –†–∞–∑–º–µ—Ä JSON —Å–æ–æ–±—â–µ–Ω–∏—è: {len(json_message)} –±–∞–π—Ç")
                await manager.send_personal_message(json_message, websocket)
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket")
            except Exception as send_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                short_content = ai_response_data["content"][:1000] + "...\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
                short_response = response_message.copy()
                short_response["content"] = short_content
                await manager.send_personal_message(json.dumps(short_response, ensure_ascii=False), websocket)
            
    except WebSocketDisconnect:
        print(f"üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏ {session_id}")
        manager.disconnect(websocket)
    except ConnectionResetError:
        print(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        manager.disconnect(websocket)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –≤ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–ª–∏–µ–Ω—Ç—É
            error_message = {
                "type": "error",
                "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.",
                "timestamp": datetime.now().isoformat()
            }
            await manager.send_personal_message(json.dumps(error_message), websocket)
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        finally:
            manager.disconnect(websocket)

@chat_router.get("/api/chat/sessions/{session_id}/stats")
async def get_session_stats(session_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    stats = await chat_manager.get_session_stats(session_id)
    
    if not stats:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return JSONResponse(content=stats)

@chat_router.get("/api/chat/sessions")
async def get_all_sessions_stats():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º"""
    stats = await chat_manager.get_all_sessions_stats()
    return JSONResponse(content=stats)

@chat_router.post("/api/chat/sessions/{session_id}/export")
async def export_session(session_id: str):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
    success = await chat_manager.export_session(session_id)
    
    if not success:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    return JSONResponse(content={"message": "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞"})

@chat_router.post("/api/chat/test")
async def test_ai_response(message: str):
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenRouter AI"""
    try:
        response = await openrouter_ai.get_smart_response(message)
        return JSONResponse(content={
            "success": True,
            "response": response
        })
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error": str(e)
            }
        )

@chat_router.get("/api/chat/health")
async def chat_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —á–∞—Ç-—Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenRouter API
        test_response = await openrouter_ai.generate_response("–¢–µ—Å—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await chat_manager.get_all_sessions_stats()
        
        return JSONResponse(content={
            "status": "healthy",
            "openrouter_api": "working" if test_response else "error",
            "active_sessions": stats.get("active_sessions", 0),
            "total_sessions": stats.get("total_sessions", 0),
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
        )

@chat_router.post("/api/chat/transfer-to-manager")
async def transfer_to_manager(request: Request):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–±-—á–∞—Ç–∞ –Ω–∞ –∂–∏–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        data = await request.json()
        session_id = data.get("session_id")
        chat_history = data.get("chat_history", [])
        client_name = data.get("client_name")
        client_phone = data.get("client_phone")
        
        if not session_id:
            return {"success": False, "error": "session_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"}
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        from telegram_bot.services.manager_service import manager_service
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
        chat_data = await manager_service.create_support_chat(
            session_id=session_id,
            chat_history=chat_history,
            client_name=client_name,
            client_phone=client_phone
        )
        
        if not chat_data:
            return {
                "success": False,
                "error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
                "message": "–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∑–∞–Ω—è—Ç—ã. –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await manager_service.notify_manager_new_chat_by_data(
            manager_telegram_id=chat_data["manager_telegram_id"],
            chat_data=chat_data,
            chat_history=chat_history
        )
        
        return {
            "success": True,
            "message": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω!",
            "manager_name": chat_data["manager_name"],
            "chat_id": chat_data["chat_id"],
            "support_chat_id": chat_data["id"]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return {
            "success": False,
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }

@chat_router.post("/api/chat/send-message")
async def send_message_to_support(request: Request):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ Telegram"""
    try:
        data = await request.json()
        chat_id = data.get("chat_id")
        message_text = data.get("message_text", "").strip()
        client_name = data.get("client_name")
        
        if not chat_id or not message_text:
            return {"success": False, "error": "chat_id –∏ message_text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        from telegram_bot.services.manager_service import manager_service
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ Telegram
        success = await manager_service.send_message_to_manager(
            chat_id=chat_id,
            message_text=message_text,
            client_name=client_name
        )
        
        if success:
            return {"success": True, "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É"}
        else:
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return {
            "success": False,
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }

async def check_if_transferred_to_manager(session_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –≤–µ–±-—á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    try:
        from telegram_bot.models.database import AsyncSessionLocal
        from telegram_bot.models.support_models import SupportChat
        from sqlalchemy import select
        from sqlalchemy.orm import selectinload
        
        async with AsyncSessionLocal() as session:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º web_session_id
            from sqlalchemy import text
            result = await session.execute(
                select(SupportChat)
                .options(selectinload(SupportChat.manager))
                .where(
                    text("chat_metadata ->> 'web_session_id' = :session_id"),
                    SupportChat.is_active == True
                ).params(session_id=session_id)
            )
            support_chat = result.scalar_one_or_none()
            return support_chat
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
        return None

@chat_router.get("/api/chat/{chat_id}/messages")
async def get_chat_messages(chat_id: str, limit: int = 50):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"""
    try:
        from telegram_bot.models.database import AsyncSessionLocal
        from telegram_bot.models.support_models import SupportChat, ChatMessage
        from sqlalchemy import select, desc
        from sqlalchemy.orm import selectinload
        
        async with AsyncSessionLocal() as session:
            # –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            result = await session.execute(
                select(SupportChat).options(
                    selectinload(SupportChat.messages)
                ).where(SupportChat.chat_id == chat_id)
            )
            support_chat = result.scalar_one_or_none()
            
            if not support_chat:
                return {"success": False, "error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_query = select(ChatMessage).where(
                ChatMessage.chat_id == support_chat.id
            ).order_by(desc(ChatMessage.created_at)).limit(limit)
            
            messages_result = await session.execute(messages_query)
            messages = messages_result.scalars().all()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            formatted_messages = []
            for msg in reversed(messages):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                formatted_messages.append({
                    "id": msg.id,
                    "sender_type": msg.sender_type,
                    "sender_name": msg.sender_name,
                    "message": msg.message_text,
                    "timestamp": msg.created_at.isoformat(),
                    "is_read": msg.is_read
                })
            
            return {
                "success": True,
                "messages": formatted_messages,
                "chat_info": {
                    "chat_id": support_chat.chat_id,
                    "is_active": support_chat.is_active,
                    "client_name": support_chat.client_name,
                    "manager_id": support_chat.manager_id
                }
            }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return {
            "success": False,
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
@chat_router.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —á–∞—Ç-—Å–µ—Ä–≤–∏—Å–∞...")
    if openrouter_ai:
        await openrouter_ai.close()
    await chat_manager.cleanup_sessions() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É
    print("‚úÖ –ß–∞—Ç-—Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω") 