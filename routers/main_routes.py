"""
–£–ú–ù–´–ô –¢–ê–ö–°–û–ü–ê–†–ö - –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
–†–æ—É—Ç–µ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∞–π—Ç–∞
"""

from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
import asyncio
import json
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
main_router = APIRouter()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")

@main_router.get("/", response_class=HTMLResponse)
async def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞–π—Ç–∞"""
    with open("index.html", "r", encoding="utf-8") as f:
        html_content = f.read()
    return HTMLResponse(content=html_content)

@main_router.get("/privacy-policy", response_class=HTMLResponse)
async def privacy_policy(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    return templates.TemplateResponse("privacy-policy.html", {"request": request})

@main_router.get("/user-agreement", response_class=HTMLResponse)
async def user_agreement(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    return templates.TemplateResponse("user-agreement.html", {"request": request})

@main_router.get("/signup", response_class=HTMLResponse)
async def signup_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å–∏–Ω–æ–Ω–∏–º –¥–ª—è /signup.html)"""
    return templates.TemplateResponse("signup.html", {"request": request})

@main_router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "–£–º–Ω—ã–π –¢–∞–∫—Å–æ–ø–∞—Ä–∫ API",
        "version": "1.0.0"
    }

@main_router.post("/api/register")
async def register_driver(request: Request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è/–∫—É—Ä—å–µ—Ä–∞"""
    try:
        data = await request.json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ["name", "phone", "role"]
        for field in required_fields:
            if field not in data or not data[field]:
                return {"success": False, "error": f"–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        registration_data = {
            "id": f"reg_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "name": data["name"],
            "phone": data["phone"],
            "role": data["role"],
            "status": "pending",
            "created_at": datetime.now().isoformat(),
            "agreement": data.get("agreement", False)
        }
        
        print(f"üìù –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_data}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(1)
        
        return {
            "success": True,
            "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            "registration_id": registration_data["id"],
            "estimated_callback_time": "30 –º–∏–Ω—É—Ç"
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return {"success": False, "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏"}

@main_router.post("/api/signup")
async def signup_application(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        data = await request.json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["fullName", "phone", "age", "city", "category"]
        for field in required_fields:
            if field not in data or not data[field]:
                return {"success": False, "error": f"–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"}
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = data["category"]
        if category in ["driver", "both", "cargo"]:
            if "experience" not in data or not data["experience"]:
                return {"success": False, "error": "–î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è"}
        
        if category in ["courier", "both"]:
            if "transport" not in data or not data["transport"]:
                return {"success": False, "error": "–î–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"}
        
        if category == "cargo":
            if "loadCapacity" not in data or not data["loadCapacity"]:
                return {"success": False, "error": "–î–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å"}
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        application_data = {
            "id": f"app_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{category}",
            "category": category,
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –∏–∑ —Ñ–æ—Ä–º—ã)
            "full_name": data["fullName"],
            "phone": data["phone"],
            "age": int(data["age"]),
            "city": data["city"],
            "email": data.get("email", ""),
            
            # –ù–æ–≤—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            "citizenship": data.get("citizenship"),
            "workStatus": data.get("workStatus"),
            "preferredTime": data.get("preferredTime"),
            "workSchedule": data.get("workSchedule"),
            "comments": data.get("comments"),
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
            "experience": data.get("experience"),
            "hasDriverLicense": data.get("hasDriverLicense"),
            "hasCar": data.get("hasCar"),
            "carBrand": data.get("carBrand"),
            "carModel": data.get("carModel"),
            "carYear": data.get("carYear"),
            "carClass": data.get("carClass"),
            "hasTaxiPermit": data.get("hasTaxiPermit"),
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
            "transport": data.get("transport", ""),
            "deliveryType": data.get("deliveryType", []),
            "hasThermoBag": data.get("hasThermoBag"),
            "courierLicense": data.get("courierLicense"),
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö
            "loadCapacity": data.get("loadCapacity", ""),
            "truckType": data.get("truckType"),
            "cargoLicense": data.get("cargoLicense"),
            
            # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–ø—ã—Ç
            "workExperience": data.get("workExperience"),
            "previousPlatforms": data.get("previousPlatforms"),
            "hasMedicalCert": data.get("hasMedicalCert"),
            "documents": data.get("documents", []),
            
            # –°–æ–≥–ª–∞—Å–∏—è
            "hasDocuments": data.get("hasDocuments", False),
            "agreeTerms": data.get("agreeTerms", False),
            "agreeMarketing": data.get("agreeMarketing", False),
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            "status": "new",
            "created_at": datetime.now().isoformat(),
            "source": "signup_page"
        }
        
        print(f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ({category}): {application_data}")
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å Telegram –±–æ—Ç–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
            from telegram_bot.services.application_service import handle_new_application_from_site
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ Telegram –±–æ—Ç (–ø–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã)
            # –ü–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã–µ
            bot_success = await handle_new_application_from_site(application_data)
            
            if bot_success:
                print(f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç")
            else:
                print(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º: {e}")
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import traceback
            print(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞—è–≤–∫–∏
        await asyncio.sleep(1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        category_names = {
            "driver": "–≤–æ–¥–∏—Ç–µ–ª—è",
            "courier": "–∫—É—Ä—å–µ—Ä–∞", 
            "both": "–≤–æ–¥–∏—Ç–µ–ª—è –∏ –∫—É—Ä—å–µ—Ä–∞",
            "cargo": "–≤–æ–¥–∏—Ç–µ–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫"
        }
        
        return {
            "success": True,
            "message": f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {category_names[category]} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            "application_id": application_data["id"],
            "category": category,
            "estimated_callback_time": "24 —á–∞—Å–∞",
            "contact_phone": "+7 996 807-37-43"
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return {"success": False, "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏"}

@main_router.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞"""
    return {
        "active_drivers": 1247,
        "active_couriers": 389,
        "total_orders_today": 5632,
        "average_earnings": 95000,
        "satisfaction_rate": 4.8,
        "response_time": "< 30 —Å–µ–∫",
        "ai_consultations_today": 234
    }

@main_router.get("/api/calculator")
async def calculate_earnings(
    hours_per_day: int = 8,
    days_per_week: int = 5,
    avg_order_cost: int = 400
):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    orders_per_hour = 2
    driver_percent = 0.8
    weeks_in_month = 4.33
    
    daily_earnings = hours_per_day * orders_per_hour * avg_order_cost * driver_percent
    weekly_earnings = daily_earnings * days_per_week
    monthly_earnings = weekly_earnings * weeks_in_month
    
    return {
        "daily_earnings": round(daily_earnings),
        "weekly_earnings": round(weekly_earnings),
        "monthly_earnings": round(monthly_earnings),
        "parameters": {
            "hours_per_day": hours_per_day,
            "days_per_week": days_per_week,
            "avg_order_cost": avg_order_cost
        }
    } 