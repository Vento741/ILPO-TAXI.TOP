"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API —Å–∞–π—Ç–∞
"""
import logging
import asyncio
from typing import Dict, List, Optional
from datetime import datetime
import httpx
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from telegram_bot.models.database import AsyncSessionLocal
from telegram_bot.models.support_models import Application, ApplicationStatus
from telegram_bot.services.manager_service import manager_service
from telegram_bot.config.settings import settings
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

class ApplicationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏"""
    
    def __init__(self):
        self.api_url = settings.FASTAPI_URL
        self.api_secret = settings.API_SECRET_KEY
    
    async def create_application_from_api(self, application_data: Dict) -> Optional[Application]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö API —Å–∞–π—Ç–∞"""
        async with AsyncSessionLocal() as session:
            try:
                logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö: {application_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                full_name = application_data.get("full_name", "")
                phone = application_data.get("phone", "")
                age = application_data.get("age")
                city = application_data.get("city", "")
                category = application_data.get("category", "")
                
                if not all([full_name, phone, age, city, category]):
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: full_name={full_name}, phone={phone}, age={age}, city={city}, category={category}")
                    return None
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –∏–∑ —á–µ–∫–±–æ–∫—Å–æ–≤
                delivery_types = application_data.get("deliveryType", [])
                if isinstance(delivery_types, str):
                    delivery_types = [delivery_types]
                
                available_documents = application_data.get("documents", [])
                if isinstance(available_documents, str):
                    available_documents = [available_documents]
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
                new_application = Application(
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    full_name=full_name,
                    phone=phone,
                    age=int(age) if age else None,
                    city=city,
                    category=category,
                    email=application_data.get("email"),
                    
                    # –ù–æ–≤—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                    citizenship=application_data.get("citizenship"),
                    work_status=application_data.get("workStatus"),
                    preferred_time=application_data.get("preferredTime"),
                    work_schedule=application_data.get("workSchedule"),
                    comments=application_data.get("comments"),
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
                    experience=application_data.get("experience"),
                    has_driver_license=application_data.get("hasDriverLicense"),
                    has_car=application_data.get("hasCar"),
                    car_brand=application_data.get("carBrand"),
                    car_model=application_data.get("carModel"),
                    car_year=int(application_data.get("carYear")) if application_data.get("carYear") else None,
                    car_class=application_data.get("carClass"),
                    has_taxi_permit=application_data.get("hasTaxiPermit"),
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
                    transport=application_data.get("transport"),
                    delivery_types=delivery_types if delivery_types else None,
                    has_thermo_bag=application_data.get("hasThermoBag"),
                    courier_license=application_data.get("courierLicense"),
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö
                    load_capacity=application_data.get("loadCapacity"),
                    truck_type=application_data.get("truckType"),
                    cargo_license=application_data.get("cargoLicense"),
                    
                    # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–ø—ã—Ç
                    work_experience=application_data.get("workExperience"),
                    previous_platforms=application_data.get("previousPlatforms"),
                    has_medical_cert=application_data.get("hasMedicalCert"),
                    available_documents=available_documents if available_documents else None,
                    
                    # –°–æ–≥–ª–∞—Å–∏—è
                    has_documents_confirmed=bool(application_data.get("hasDocuments")),
                    agree_terms=bool(application_data.get("agreeTerms")),
                    agree_marketing=bool(application_data.get("agreeMarketing")),
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    additional_info=self._format_additional_info(application_data),
                    status=ApplicationStatus.NEW
                )
                
                logger.info(f"üìù –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞–Ω: {new_application}")
                
                session.add(new_application)
                await session.commit()
                await session.refresh(new_application)
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{new_application.id} –æ—Ç {new_application.full_name}")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if settings.AUTO_ASSIGN_MANAGERS:
                    await self.auto_assign_application(new_application.id)
                
                return new_application
                
            except Exception as e:
                await session.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
                import traceback
                logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                return None
    
    def _format_additional_info(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã"""
        info_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if data.get("citizenship"):
            citizenship_map = {
                "rf": "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§",
                "eaeu": "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –ï–ê–≠–°", 
                "other": "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã"
            }
            info_parts.append(f"–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {citizenship_map.get(data['citizenship'], data['citizenship'])}")
        
        if data.get("workStatus"):
            status_map = {
                "self_employed": "–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π",
                "park_self_employed": "–ü–∞—Ä–∫–æ–≤–∞—è —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å",
                "ip": "–ò–ü (–£–°–ù 6%)",
                "employee": "–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä",
                "not_sure": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è"
            }
            info_parts.append(f"–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã: {status_map.get(data['workStatus'], data['workStatus'])}")
        
        # –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
        if data.get("hasDriverLicense"):
            license_map = {
                "yes": "–ï—Å—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B",
                "getting": "–ü–æ–ª—É—á–∞—é –ø—Ä–∞–≤–∞",
                "no": "–ù–µ—Ç –ø—Ä–∞–≤"
            }
            info_parts.append(f"–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞: {license_map.get(data['hasDriverLicense'], data['hasDriverLicense'])}")
        
        if data.get("hasCar"):
            car_map = {
                "own": "–ï—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                "rent": "–ü–ª–∞–Ω–∏—Ä—É—é –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å",
                "no": "–ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
            }
            info_parts.append(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_map.get(data['hasCar'], data['hasCar'])}")
        
        if data.get("carBrand") and data.get("carModel"):
            car_info = f"{data['carBrand']} {data['carModel']}"
            if data.get("carYear"):
                car_info += f" ({data['carYear']} –≥.)"
            info_parts.append(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}")
        
        if data.get("carClass"):
            class_map = {
                "economy": "–≠–∫–æ–Ω–æ–º",
                "comfort": "–ö–æ–º—Ñ–æ—Ä—Ç",
                "comfort_plus": "–ö–æ–º—Ñ–æ—Ä—Ç+",
                "business": "–ë–∏–∑–Ω–µ—Å"
            }
            info_parts.append(f"–ñ–µ–ª–∞–µ–º—ã–π –∫–ª–∞—Å—Å: {class_map.get(data['carClass'], data['carClass'])}")
        
        if data.get("hasTaxiPermit"):
            permit_map = {
                "yes": "–ï—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–∞–∫—Å–∏",
                "getting": "–û—Ñ–æ—Ä–º–ª—è—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
                "no": "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                "help_needed": "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏"
            }
            info_parts.append(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–∫—Å–∏: {permit_map.get(data['hasTaxiPermit'], data['hasTaxiPermit'])}")
        
        # –î–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
        if data.get("deliveryType") and isinstance(data["deliveryType"], list):
            delivery_map = {
                "yandex_food": "–Ø–Ω–¥–µ–∫—Å.–ï–¥–∞",
                "yandex_delivery": "–Ø–Ω–¥–µ–∫—Å.–î–æ—Å—Ç–∞–≤–∫–∞", 
                "yandex_lavka": "–Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞",
                "all": "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            }
            delivery_types = [delivery_map.get(dt, dt) for dt in data["deliveryType"]]
            info_parts.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {', '.join(delivery_types)}")
        
        if data.get("hasThermoBag"):
            bag_map = {
                "yes": "–ï—Å—Ç—å —Ç–µ—Ä–º–æ—Å—É–º–∫–∞",
                "buying": "–ü–ª–∞–Ω–∏—Ä—É—é –∫—É–ø–∏—Ç—å",
                "rent": "–ë—É–¥—É –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å",
                "no": "–ù–µ—Ç —Ç–µ—Ä–º–æ—Å—É–º–∫–∏"
            }
            info_parts.append(f"–¢–µ—Ä–º–æ—Å—É–º–∫–∞: {bag_map.get(data['hasThermoBag'], data['hasThermoBag'])}")
        
        if data.get("courierLicense"):
            courier_license_map = {
                "yes": "–ï—Å—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B",
                "motorcycle": "–ï—Å—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A/A1",
                "no": "–ù–µ—Ç –ø—Ä–∞–≤"
            }
            info_parts.append(f"–ü—Ä–∞–≤–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞: {courier_license_map.get(data['courierLicense'], data['courierLicense'])}")
        
        # –î–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö
        if data.get("truckType"):
            truck_map = {
                "tent": "–¢–µ–Ω—Ç–æ–≤–∞–Ω–Ω—ã–π",
                "closed": "–ó–∞–∫—Ä—ã—Ç—ã–π",
                "refrigerator": "–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä",
                "platform": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                "dump": "–°–∞–º–æ—Å–≤–∞–ª"
            }
            info_parts.append(f"–¢–∏–ø –∫—É–∑–æ–≤–∞: {truck_map.get(data['truckType'], data['truckType'])}")
        
        if data.get("cargoLicense"):
            cargo_license_map = {
                "b": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è B (–¥–æ 3,5—Ç)",
                "c": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è C",
                "ce": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è CE",
                "no": "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≥—Ä—É–∑–æ–≤–æ–π"
            }
            info_parts.append(f"–ü—Ä–∞–≤–∞ –Ω–∞ –≥—Ä—É–∑–æ–≤–æ–π: {cargo_license_map.get(data['cargoLicense'], data['cargoLicense'])}")
        
        # –û–ø—ã—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if data.get("workExperience"):
            exp_map = {
                "no_experience": "–ù–µ—Ç –æ–ø—ã—Ç–∞",
                "less_year": "–ú–µ–Ω–µ–µ –≥–æ–¥–∞",
                "1_3_years": "1-3 –≥–æ–¥–∞",
                "3_5_years": "3-5 –ª–µ—Ç",
                "more_5_years": "–ë–æ–ª–µ–µ 5 –ª–µ—Ç"
            }
            info_parts.append(f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {exp_map.get(data['workExperience'], data['workExperience'])}")
        
        if data.get("previousPlatforms"):
            info_parts.append(f"–†–∞–±–æ—Ç–∞–ª –≤: {data['previousPlatforms']}")
        
        if data.get("hasMedicalCert"):
            med_map = {
                "yes": "–ï—Å—Ç—å –º–µ–¥—Å–ø—Ä–∞–≤–∫–∞",
                "expired": "–°–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞",
                "no": "–ù–µ—Ç —Å–ø—Ä–∞–≤–∫–∏",
                "help_needed": "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏"
            }
            info_parts.append(f"–ú–µ–¥—Å–ø—Ä–∞–≤–∫–∞: {med_map.get(data['hasMedicalCert'], data['hasMedicalCert'])}")
        
        if data.get("documents") and isinstance(data["documents"], list):
            doc_map = {
                "passport": "–ü–∞—Å–ø–æ—Ä—Ç",
                "driver_license": "–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞",
                "snils": "–°–ù–ò–õ–°",
                "inn": "–ò–ù–ù",
                "car_docs": "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –∞–≤—Ç–æ"
            }
            docs = [doc_map.get(doc, doc) for doc in data["documents"]]
            info_parts.append(f"–î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(docs)}")
        
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        if data.get("preferredTime"):
            time_map = {
                "9-12": "09:00-12:00",
                "12-15": "12:00-15:00", 
                "15-18": "15:00-18:00",
                "18-21": "18:00-21:00",
                "any": "–õ—é–±–æ–µ –≤—Ä–µ–º—è"
            }
            info_parts.append(f"–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: {time_map.get(data['preferredTime'], data['preferredTime'])}")
        
        if data.get("workSchedule"):
            schedule_map = {
                "full_time": "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å",
                "part_time": "–ù–µ–ø–æ–ª–Ω—ã–π –¥–µ–Ω—å",
                "weekends": "–¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ",
                "evenings": "–í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã",
                "flexible": "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫"
            }
            info_parts.append(f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {schedule_map.get(data['workSchedule'], data['workSchedule'])}")
        
        if data.get("email"):
            info_parts.append(f"Email: {data['email']}")
        
        if data.get("comments"):
            info_parts.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments']}")
        
        # –°–æ–≥–ª–∞—Å–∏—è
        agreements = []
        if data.get("hasDocuments"):
            agreements.append("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        if data.get("agreeTerms"):
            agreements.append("–°–æ–≥–ª–∞—Å–∏–ª—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏")
        if data.get("agreeMarketing"):
            agreements.append("–°–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
        
        if agreements:
            info_parts.append(f"–°–æ–≥–ª–∞—Å–∏—è: {', '.join(agreements)}")
        
        if data.get("timestamp"):
            info_parts.append(f"–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {data['timestamp']}")
        
        return "\n".join(info_parts)
    
    async def auto_assign_application(self, application_id: int) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
        try:
            # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            available_manager = await manager_service.get_available_manager()
            
            if not available_manager:
                logger.info(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id}")
                return False
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞—è–≤–∫—É
            success = await manager_service.assign_application_to_manager(
                application_id, 
                available_manager.telegram_id
            )
            
            if success:
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{application_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {available_manager.first_name}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                await self.notify_manager_about_new_application(available_manager.telegram_id, application_id)
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫—É #{application_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    async def notify_manager_about_new_application(self, manager_telegram_id: int, application_id: int):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ —á–µ—Ä–µ–∑ Telegram"""
        try:
            from aiogram import Bot
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
            async with AsyncSessionLocal() as session:
                application = await session.get(Application, application_id)
                
                if not application:
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = f"""
üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê–ó–ù–ê–ß–ï–ù–ê –í–ê–ú!**

üìã **–ó–∞—è–≤–∫–∞ #{application.id}** | {self.get_category_text(application.category)}

üë§ **–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**
‚Ä¢ **–ò–º—è:** {application.full_name}
‚Ä¢ **–¢–µ–ª–µ—Ñ–æ–Ω:** {application.phone}
‚Ä¢ **–í–æ–∑—Ä–∞—Å—Ç:** {application.age if application.age else '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç
‚Ä¢ **–ì–æ—Ä–æ–¥:** {application.city}"""

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                if application.email:
                    text += f"\n‚Ä¢ **Email:** {application.email}"
                
                if application.citizenship:
                    citizenship_map = {
                        "rf": "üá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§",
                        "eaeu": "üåê –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –ï–ê–≠–°",
                        "other": "üåç –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã"
                    }
                    text += f"\n‚Ä¢ **–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:** {citizenship_map.get(application.citizenship, application.citizenship)}"
                
                if application.work_status:
                    status_map = {
                        "self_employed": "üíº –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π (4-6% –Ω–∞–ª–æ–≥)",
                        "park_self_employed": "üè¢ –ü–∞—Ä–∫–æ–≤–∞—è —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å (+10 –±–∞–ª–ª–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)",
                        "ip": "üìä –ò–ü (–£–°–ù 6%)",
                        "employee": "üìù –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä",
                        "not_sure": "‚ùì –ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è (–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)"
                    }
                    text += f"\n‚Ä¢ **–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã:** {status_map.get(application.work_status, application.work_status)}"

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
                if application.category in ['driver', 'both', 'cargo']:
                    text += f"\n\nüöó **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–û–î–ò–¢–ï–õ–ï:**"
                    
                    if application.experience:
                        text += f"\n‚Ä¢ **–°—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è:** {application.experience} –ª–µ—Ç"
                    
                    if application.has_driver_license:
                        license_map = {
                            "yes": "‚úÖ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B",
                            "getting": "‚è≥ –ü–æ–ª—É—á–∞—é –ø—Ä–∞–≤–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                            "no": "‚ùå –ù–µ—Ç –ø—Ä–∞–≤"
                        }
                        text += f"\n‚Ä¢ **–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞:** {license_map.get(application.has_driver_license, application.has_driver_license)}"
                    
                    if application.has_car:
                        car_map = {
                            "own": "üöó –ï—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                            "rent": "üîë –ü–ª–∞–Ω–∏—Ä—É—é –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å",
                            "no": "‚ùå –ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
                        }
                        text += f"\n‚Ä¢ **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {car_map.get(application.has_car, application.has_car)}"
                    
                    # –î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                    if application.car_brand or application.car_model:
                        car_info = ""
                        if application.car_brand:
                            car_info += application.car_brand
                        if application.car_model:
                            car_info += f" {application.car_model}"
                        if application.car_year:
                            car_info += f" ({application.car_year} –≥.)"
                        if car_info:
                            text += f"\n‚Ä¢ **–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** {car_info}"
                    
                    if application.car_class:
                        class_map = {
                            "economy": "üí∞ –≠–∫–æ–Ω–æ–º (Lada, KIA Rio, Hyundai Solaris)",
                            "comfort": "‚≠ê –ö–æ–º—Ñ–æ—Ä—Ç (VW Polo, Skoda Rapid, KIA Cerato)",
                            "comfort_plus": "‚≠ê‚≠ê –ö–æ–º—Ñ–æ—Ä—Ç+ (Toyota Camry, KIA Optima)",
                            "business": "üíé –ë–∏–∑–Ω–µ—Å (BMW 5, Mercedes E, Audi A6)"
                        }
                        text += f"\n‚Ä¢ **–ñ–µ–ª–∞–µ–º—ã–π –∫–ª–∞—Å—Å:** {class_map.get(application.car_class, application.car_class)}"
                    
                    if application.has_taxi_permit:
                        permit_map = {
                            "yes": "‚úÖ –ï—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–∞–∫—Å–∏",
                            "getting": "‚è≥ –û—Ñ–æ—Ä–º–ª—è—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
                            "no": "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                            "help_needed": "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏"
                        }
                        text += f"\n‚Ä¢ **–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–∫—Å–∏:** {permit_map.get(application.has_taxi_permit, application.has_taxi_permit)}"

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
                if application.category in ['courier', 'both']:
                    text += f"\n\nüì¶ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–£–†–¨–ï–†–ï:**"
                    
                    if application.transport:
                        transport_map = {
                            "foot": "üö∂ –ü–µ—à–∏–π –∫—É—Ä—å–µ—Ä",
                            "bike": "üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥",
                            "scooter": "üõ¥ –≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç",
                            "motorcycle": "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª/—Å–∫—É—Ç–µ—Ä",
                            "car": "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å"
                        }
                        text += f"\n‚Ä¢ **–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:** {transport_map.get(application.transport, application.transport)}"
                    
                    if application.delivery_types:
                        delivery_map = {
                            "yandex_food": "üçï –Ø–Ω–¥–µ–∫—Å.–ï–¥–∞",
                            "yandex_delivery": "üì¶ –Ø–Ω–¥–µ–∫—Å.–î–æ—Å—Ç–∞–≤–∫–∞",
                            "yandex_lavka": "üõí –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞",
                            "all": "üåü –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                        }
                        delivery_list = [delivery_map.get(dt, dt) for dt in application.delivery_types]
                        text += f"\n‚Ä¢ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:** {', '.join(delivery_list)}"
                    
                    if application.has_thermo_bag:
                        bag_map = {
                            "yes": "‚úÖ –ï—Å—Ç—å —Ç–µ—Ä–º–æ—Å—É–º–∫–∞",
                            "buying": "üõí –ü–ª–∞–Ω–∏—Ä—É—é –∫—É–ø–∏—Ç—å",
                            "rent": "üîë –ë—É–¥—É –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å",
                            "no": "‚ùå –ù–µ—Ç —Ç–µ—Ä–º–æ—Å—É–º–∫–∏"
                        }
                        text += f"\n‚Ä¢ **–¢–µ—Ä–º–æ—Å—É–º–∫–∞:** {bag_map.get(application.has_thermo_bag, application.has_thermo_bag)}"
                    
                    if application.courier_license:
                        courier_license_map = {
                            "yes": "‚úÖ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B",
                            "motorcycle": "üèçÔ∏è –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A/A1",
                            "no": "‚ùå –ù–µ—Ç –ø—Ä–∞–≤"
                        }
                        text += f"\n‚Ä¢ **–ü—Ä–∞–≤–∞ (–¥–ª—è –∞–≤—Ç–æ–∫—É—Ä—å–µ—Ä–∞):** {courier_license_map.get(application.courier_license, application.courier_license)}"

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö
                if application.category == 'cargo':
                    text += f"\n\nüöõ **–ì–†–£–ó–û–í–´–ï –ü–ï–†–ï–í–û–ó–ö–ò:**"
                    
                    if application.load_capacity:
                        capacity_map = {
                            "1.5": "üì¶ –î–æ 1,5 —Ç–æ–Ω–Ω (–ì–∞–∑–µ–ª—å)",
                            "3": "üì¶üì¶ –î–æ 3 —Ç–æ–Ω–Ω",
                            "5": "üì¶üì¶üì¶ –î–æ 5 —Ç–æ–Ω–Ω",
                            "10": "üöö –î–æ 10 —Ç–æ–Ω–Ω",
                            "20": "üöõ –î–æ 20 —Ç–æ–Ω–Ω",
                            "20+": "üöõüöõ –ë–æ–ª–µ–µ 20 —Ç–æ–Ω–Ω"
                        }
                        text += f"\n‚Ä¢ **–ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å:** {capacity_map.get(application.load_capacity, application.load_capacity)}"
                    
                    if application.truck_type:
                        truck_map = {
                            "tent": "üèïÔ∏è –¢–µ–Ω—Ç–æ–≤–∞–Ω–Ω—ã–π",
                            "closed": "üì¶ –ó–∞–∫—Ä—ã—Ç—ã–π",
                            "refrigerator": "üßä –†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä",
                            "platform": "üöõ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                            "dump": "üèóÔ∏è –°–∞–º–æ—Å–≤–∞–ª"
                        }
                        text += f"\n‚Ä¢ **–¢–∏–ø –∫—É–∑–æ–≤–∞:** {truck_map.get(application.truck_type, application.truck_type)}"
                    
                    if application.cargo_license:
                        cargo_license_map = {
                            "b": "üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è B (–¥–æ 3,5—Ç)",
                            "c": "üöö –ö–∞—Ç–µ–≥–æ—Ä–∏—è C",
                            "ce": "üöõ –ö–∞—Ç–µ–≥–æ—Ä–∏—è CE",
                            "no": "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≥—Ä—É–∑–æ–≤–æ–π"
                        }
                        text += f"\n‚Ä¢ **–ü—Ä–∞–≤–∞ –Ω–∞ –≥—Ä—É–∑–æ–≤–æ–π:** {cargo_license_map.get(application.cargo_license, application.cargo_license)}"

                # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–ø—ã—Ç
                text += f"\n\nüìÑ **–î–û–ö–£–ú–ï–ù–¢–´ –ò –û–ü–´–¢:**"
                
                if application.work_experience:
                    exp_map = {
                        "no_experience": "üÜï –ù–µ—Ç –æ–ø—ã—Ç–∞ –≤ —Ç–∞–∫—Å–∏/–¥–æ—Å—Ç–∞–≤–∫–µ",
                        "less_year": "ü•â –ú–µ–Ω–µ–µ –≥–æ–¥–∞",
                        "1_3_years": "ü•à 1-3 –≥–æ–¥–∞",
                        "3_5_years": "ü•á 3-5 –ª–µ—Ç",
                        "more_5_years": "üèÜ –ë–æ–ª–µ–µ 5 –ª–µ—Ç"
                    }
                    text += f"\n‚Ä¢ **–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:** {exp_map.get(application.work_experience, application.work_experience)}"
                
                if application.previous_platforms:
                    text += f"\n‚Ä¢ **–†–∞–±–æ—Ç–∞–ª –≤:** {application.previous_platforms}"
                
                if application.has_medical_cert:
                    med_map = {
                        "yes": "‚úÖ –ï—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –º–µ–¥—Å–ø—Ä–∞–≤–∫–∞",
                        "expired": "‚ö†Ô∏è –°–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞",
                        "no": "‚ùå –ù–µ—Ç —Å–ø—Ä–∞–≤–∫–∏",
                        "help_needed": "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏"
                    }
                    text += f"\n‚Ä¢ **–ú–µ–¥—Å–ø—Ä–∞–≤–∫–∞:** {med_map.get(application.has_medical_cert, application.has_medical_cert)}"
                
                if application.available_documents:
                    doc_map = {
                        "passport": "üÜî –ü–∞—Å–ø–æ—Ä—Ç",
                        "driver_license": "üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞",
                        "snils": "üìÑ –°–ù–ò–õ–°",
                        "inn": "üìä –ò–ù–ù",
                        "car_docs": "üöô –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –∞–≤—Ç–æ"
                    }
                    docs = [doc_map.get(doc, doc) for doc in application.available_documents]
                    text += f"\n‚Ä¢ **–ò–º–µ—é—â–∏–µ—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã:** {', '.join(docs)}"

                # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫
                text += f"\n\n‚è∞ **–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø:**"
                
                if application.preferred_time:
                    time_map = {
                        "9-12": "üåÖ 09:00-12:00",
                        "12-15": "‚òÄÔ∏è 12:00-15:00",
                        "15-18": "üåá 15:00-18:00",
                        "18-21": "üåÉ 18:00-21:00",
                        "any": "üïê –õ—é–±–æ–µ –≤—Ä–µ–º—è"
                    }
                    text += f"\n‚Ä¢ **–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞:** {time_map.get(application.preferred_time, application.preferred_time)}"
                
                if application.work_schedule:
                    schedule_map = {
                        "full_time": "‚è∞ –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å (8+ —á–∞—Å–æ–≤)",
                        "part_time": "üïê –ù–µ–ø–æ–ª–Ω—ã–π –¥–µ–Ω—å (4-8 —á–∞—Å–æ–≤)",
                        "weekends": "üìÖ –¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ",
                        "evenings": "üåÉ –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã",
                        "flexible": "üîÑ –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫"
                    }
                    text += f"\n‚Ä¢ **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:** {schedule_map.get(application.work_schedule, application.work_schedule)}"

                # –°–æ–≥–ª–∞—Å–∏—è
                agreements = []
                if application.has_documents_confirmed:
                    agreements.append("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã")
                if application.agree_terms:
                    agreements.append("‚úÖ –£—Å–ª–æ–≤–∏—è")
                if application.agree_marketing:
                    agreements.append("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞")
                
                if agreements:
                    text += f"\n‚Ä¢ **–°–æ–≥–ª–∞—Å–∏—è:** {', '.join(agreements)}"

                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if application.comments:
                    text += f"\n\nüí¨ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ö–õ–ò–ï–ù–¢–ê:**\n_{application.comments}_"

                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                text += f"\n\nüìÖ **–í–†–ï–ú–Ø –ü–û–î–ê–ß–ò:** {application.created_at.strftime('%d.%m.%Y %H:%M')}"
                
                text += f"\n\n‚ö° **–î–ï–ô–°–¢–í–ò–Ø:**"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{application.id}"),
                        InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"app_details_{application.id}")
                    ],
                    [
                        InlineKeyboardButton(text=f"üìû {application.phone}", callback_data=f"phone_{application.id}"),
                        InlineKeyboardButton(text="üí¨ WhatsApp", url=f"https://wa.me/{application.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')}")
                    ]
                ])
                
                await bot.send_message(
                    chat_id=manager_telegram_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
                logger.info(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {manager_telegram_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞—è–≤–∫–µ #{application_id} (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
    
    async def get_pending_applications(self, limit: int = 10) -> List[Application]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"""
        async with AsyncSessionLocal() as session:
            try:
                result = await session.execute(
                    select(Application)
                    .where(Application.status == ApplicationStatus.NEW)
                    .order_by(Application.created_at.desc())
                    .limit(limit)
                )
                return result.scalars().all()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
                return []
    
    async def notify_admins_about_new_application(self, application: Application):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        if not settings.ADMIN_IDS:
            return
        
        try:
            from aiogram import Bot
            
            bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            
            text = f"""
üìä **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í –°–ò–°–¢–ï–ú–ï**

üìã **#{application.id}** | {self.get_category_text(application.category)}

üë§ **{application.full_name}**
üì± {application.phone}
üèôÔ∏è {application.city}

‚è∞ {application.created_at.strftime('%d.%m.%Y %H:%M')}

üîÑ –°—Ç–∞—Ç—É—Å: {application.status.value.upper()}
üìä –ù–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä: {'–î–∞' if application.assigned_manager_id else '–û–∂–∏–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'}
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"app_details_{application.id}")],
                [InlineKeyboardButton(text="üë• –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="new_applications")]
            ])
            
            for admin_id in settings.ADMIN_IDS:
                try:
                    await bot.send_message(
                        chat_id=admin_id, 
                        text=text, 
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
    
    def get_category_text(self, category: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        categories = {
            "driver": "üöó –í–æ–¥–∏—Ç–µ–ª—å",
            "courier": "üì¶ –ö—É—Ä—å–µ—Ä", 
            "both": "üöóüì¶ –í–æ–¥–∏—Ç–µ–ª—å –∏ –∫—É—Ä—å–µ—Ä",
            "cargo": "üöõ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"
        }
        return categories.get(category, category)
    
    async def check_for_new_applications(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
        try:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º API
            pass
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
application_service = ApplicationService()

# –§—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API —Å–∞–π—Ç–∞
async def handle_new_application_from_site(application_data: Dict) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å —Å–∞–π—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        application = await application_service.create_application_from_api(application_data)
        
        if application:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await application_service.notify_admins_about_new_application(application)
            
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {application.full_name}")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å —Å–∞–π—Ç–∞")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞: {e}")
        return False 