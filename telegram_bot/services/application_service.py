"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API —Å–∞–π—Ç–∞
"""
import logging
import asyncio
from typing import Dict, List, Optional
from datetime import datetime
import httpx
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from telegram_bot.models.database import AsyncSessionLocal
from telegram_bot.models.support_models import Application, ApplicationStatus
from telegram_bot.services.manager_service import manager_service
from telegram_bot.config.settings import settings

logger = logging.getLogger(__name__)

class ApplicationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏"""
    
    def __init__(self):
        self.api_url = settings.FASTAPI_URL
        self.api_secret = settings.API_SECRET_KEY
    
    async def create_application_from_api(self, application_data: Dict) -> Optional[Application]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö API —Å–∞–π—Ç–∞"""
        async with AsyncSessionLocal() as session:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
                new_application = Application(
                    full_name=application_data.get("fullName", ""),
                    phone=application_data.get("phone", ""),
                    age=application_data.get("age"),
                    city=application_data.get("city", ""),
                    category=application_data.get("category", ""),
                    experience=application_data.get("experience"),
                    transport=application_data.get("transport"),
                    load_capacity=application_data.get("loadCapacity"),
                    additional_info=application_data.get("additionalInfo"),
                    status=ApplicationStatus.NEW
                )
                
                session.add(new_application)
                await session.commit()
                await session.refresh(new_application)
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{new_application.id} –æ—Ç {new_application.full_name}")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if settings.AUTO_ASSIGN_MANAGERS:
                    await self.auto_assign_application(new_application.id)
                
                return new_application
                
            except Exception as e:
                await session.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
                return None
    
    async def auto_assign_application(self, application_id: int) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
        try:
            # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            available_manager = await manager_service.get_available_manager()
            
            if not available_manager:
                logger.info(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id}")
                return False
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞—è–≤–∫—É
            success = await manager_service.assign_application_to_manager(
                application_id, 
                available_manager.telegram_id
            )
            
            if success:
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{application_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {available_manager.first_name}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                await self.notify_manager_about_new_application(available_manager.telegram_id, application_id)
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫—É #{application_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    async def notify_manager_about_new_application(self, manager_telegram_id: int, application_id: int):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ —á–µ—Ä–µ–∑ Telegram"""
        try:
            from aiogram import Bot
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
            async with AsyncSessionLocal() as session:
                application = await session.get(Application, application_id)
                
                if not application:
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = f"""
üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º!**

üìã **–ó–∞—è–≤–∫–∞ #{application.id}**
üë§ **–ò–º—è:** {application.full_name}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {application.phone}
üèôÔ∏è **–ì–æ—Ä–æ–¥:** {application.city}
üöó **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {self.get_category_text(application.category)}

üìÖ **–í—Ä–µ–º—è:** {application.created_at.strftime('%d.%m.%Y %H:%M')}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏.
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"app_details_{application.id}")],
                    [InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{application.id}")],
                    [InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"tel:{application.phone}")]
                ])
                
                await bot.send_message(
                    chat_id=manager_telegram_id,
                    text=text,
                    reply_markup=keyboard
                )
                
                logger.info(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {manager_telegram_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞—è–≤–∫–µ #{application_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
    
    async def get_pending_applications(self, limit: int = 10) -> List[Application]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"""
        async with AsyncSessionLocal() as session:
            try:
                result = await session.execute(
                    select(Application)
                    .where(Application.status == ApplicationStatus.NEW)
                    .order_by(Application.created_at.desc())
                    .limit(limit)
                )
                return result.scalars().all()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
                return []
    
    async def notify_admins_about_new_application(self, application: Application):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        if not settings.ADMIN_IDS:
            return
        
        try:
            from aiogram import Bot
            
            bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            
            text = f"""
üìä **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ**

üìã **#ID{application.id}**
üë§ {application.full_name}
üì± {application.phone}
üèôÔ∏è {application.city}
üöó {self.get_category_text(application.category)}

‚è∞ {application.created_at.strftime('%d.%m.%Y %H:%M')}
            """
            
            for admin_id in settings.ADMIN_IDS:
                try:
                    await bot.send_message(chat_id=admin_id, text=text)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
    
    def get_category_text(self, category: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        categories = {
            "driver": "üöó –í–æ–¥–∏—Ç–µ–ª—å",
            "courier": "üì¶ –ö—É—Ä—å–µ—Ä", 
            "both": "üöóüì¶ –í–æ–¥–∏—Ç–µ–ª—å –∏ –∫—É—Ä—å–µ—Ä",
            "cargo": "üöõ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"
        }
        return categories.get(category, category)
    
    async def check_for_new_applications(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
        try:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º API
            pass
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
application_service = ApplicationService()

# –§—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API —Å–∞–π—Ç–∞
async def handle_new_application_from_site(application_data: Dict) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å —Å–∞–π—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        application = await application_service.create_application_from_api(application_data)
        
        if application:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await application_service.notify_admins_about_new_application(application)
            
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {application.full_name}")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å —Å–∞–π—Ç–∞")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞: {e}")
        return False 