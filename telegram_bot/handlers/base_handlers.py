"""
–ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ILPO-TAXI
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from telegram_bot.services.manager_service import manager_service
from telegram_bot.services.redis_service import redis_service
from telegram_bot.models.support_models import ManagerStatus, ApplicationStatus
from telegram_bot.config.settings import settings

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
base_router = Router()

class ManagerStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    OFFLINE = State()
    ONLINE = State()
    BUSY = State()
    HANDLING_APPLICATION = State()
    HANDLING_CHAT = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@base_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        
        if not manager:
            # –ï—Å–ª–∏ –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
            if telegram_id in settings.MANAGER_IDS or \
               telegram_id in settings.ADMIN_IDS:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                is_admin = telegram_id in settings.ADMIN_IDS
                manager = await manager_service.register_manager(
                    telegram_id=telegram_id,
                    username=user.username or "",
                    first_name=user.first_name,
                    last_name=user.last_name,
                    is_admin=is_admin
                )
                
                welcome_text = f"""
üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ILPO-TAXI!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else '–º–µ–Ω–µ–¥–∂–µ—Ä'} –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

**–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞
‚Ä¢ –û–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ —á–∞—Ç–µ
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–æ–º (–æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω)

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/online - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É (—Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω")
/offline - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ /online
                """
                
                await message.answer(welcome_text, reply_markup=get_manager_main_keyboard(is_admin, "offline"))
                await state.set_state(ManagerStates.OFFLINE)
                
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                await message.answer(
                    "ü§ñ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ILPO-TAXI –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.\n\n"
                    "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Ç–∞–∫—Å–æ–ø–∞—Ä–∫—É, "
                    "–ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://ilpo-taxi.top"
                )
                return
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
            stats = await manager_service.get_manager_stats(telegram_id)
            status_emoji = {"online": "üü¢", "busy": "üü°", "offline": "üî¥"}.get(manager.status.value, "‚ö™")
            
            welcome_text = f"""
üëã **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {manager.first_name}!**

{status_emoji} –°—Ç–∞—Ç—É—Å: {manager.status.value.upper()}
üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_chats'] if stats else 0}/{manager.max_active_chats}
üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_applications'] if stats else 0}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            await message.answer(welcome_text, reply_markup=get_manager_main_keyboard(manager.is_admin, manager.status.value))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if manager.status == ManagerStatus.ONLINE:
                await state.set_state(ManagerStates.ONLINE)
            elif manager.status == ManagerStatus.BUSY:
                await state.set_state(ManagerStates.BUSY)
            else:
                await state.set_state(ManagerStates.OFFLINE)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /online
@base_router.message(Command("online"))
async def cmd_online(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –æ–Ω–ª–∞–π–Ω"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é
        success = await manager_service.start_work_session(telegram_id)
        if success:
            await message.answer(
                f"üü¢ **–í—ã –≤ —Å–µ—Ç–∏!**\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, {manager.first_name}! –í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏ —á–∞—Ç—ã.\n"
                f"–ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {manager.max_active_chats}\n\n"
                f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /offline",
                reply_markup=get_manager_main_keyboard(manager.is_admin, "online")
            )
            await state.set_state(ManagerStates.ONLINE)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–Ω–ª–∞–π–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /online: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /offline
@base_router.message(Command("offline"))
async def cmd_offline(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –æ—Ñ–ª–∞–π–Ω"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        active_chats = await redis_service.get_manager_active_chats(str(telegram_id))
        
        if active_chats:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", callback_data="confirm_offline")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offline")]
            ])
            
            await message.answer(
                f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n"
                f"–£ –≤–∞—Å –µ—Å—Ç—å {len(active_chats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞(–æ–≤).\n"
                f"–ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É?",
                reply_markup=keyboard
            )
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
            success = await manager_service.end_work_session(telegram_id)
            if success:
                await message.answer(
                    f"üî¥ **–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                    f"–î–æ –≤—Å—Ç—Ä–µ—á–∏, {manager.first_name}! üëã\n"
                    f"–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /online",
                    reply_markup=get_manager_main_keyboard(manager.is_admin, "offline")
                )
                await state.set_state(ManagerStates.OFFLINE)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /offline: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /stats
@base_router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        stats = await manager_service.get_manager_stats(telegram_id)
        if not stats:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
            return
        
        status_emoji = {"online": "üü¢", "busy": "üü°", "offline": "üî¥"}.get(stats['status'], "‚ö™")
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã**

üë§ **–ú–µ–Ω–µ–¥–∂–µ—Ä:** {stats['manager_name']}
{status_emoji} **–°—Ç–∞—Ç—É—Å:** {stats['status'].upper()}

üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:** {stats['active_chats']}/{stats['max_chats']}
üìã **–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:** {stats['total_applications']}
üìà **–ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è:** {stats['today_applications']}

‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {stats['avg_response_time']}—Å
üïê **–ß–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é:** {stats['week_work_hours']}—á

üìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {stats['last_seen'][:19] if stats['last_seen'] else '–ù–∏–∫–æ–≥–¥–∞'}
        """
        
        await message.answer(stats_text, reply_markup=get_stats_keyboard())
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /chats - –ù–û–í–ê–Ø
@base_router.message(Command("chats"))
async def cmd_chats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        active_chats = await redis_service.get_manager_active_chats(str(telegram_id))
        
        if not active_chats:
            await message.answer(
                "üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã**\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.\n"
                "–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_chats")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        text = f"üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(active_chats)}/{manager.max_active_chats})**\n\n"
        
        for i, chat_id in enumerate(active_chats[:10], 1):
            text += f"üî∏ **–ß–∞—Ç #{i}:** {chat_id}\n"
        
        if len(active_chats) > 10:
            text += f"\n... –∏ –µ—â–µ {len(active_chats) - 10} —á–∞—Ç–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_chats")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /chats: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /status - –ù–û–í–ê–Ø
@base_router.message(Command("status"))
async def cmd_status(message: Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        current_status = manager.status.value
        status_emoji = {"online": "üü¢", "busy": "üü°", "offline": "üî¥"}.get(current_status, "‚ö™")
        
        text = f"""
‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º**

{status_emoji} **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** {current_status.upper()}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –û–Ω–ª–∞–π–Ω", callback_data="set_status_online")],
            [InlineKeyboardButton(text="üü° –ó–∞–Ω—è—Ç", callback_data="set_status_busy")],
            [InlineKeyboardButton(text="üî¥ –û—Ñ–ª–∞–π–Ω", callback_data="set_status_offline")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /admin - –ù–û–í–ê–Ø
@base_router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager or not manager.is_admin:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        system_stats = await manager_service.get_system_stats()
        
        admin_text = f"""
‚öôÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {system_stats['total_managers']}
‚Ä¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {system_stats['online_managers']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {system_stats['active_chats']}
‚Ä¢ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {system_stats['today_applications']}

üîÑ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:**
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {system_stats['hour_applications']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {system_stats['hour_completed']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏", callback_data="applications_menu")],
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", callback_data="manage_managers")],
            [InlineKeyboardButton(text="üìà –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_admin")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await message.answer(admin_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /managers - –ù–û–í–ê–Ø
@base_router.message(Command("managers"))
async def cmd_managers(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager or not manager.is_admin:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        managers_list = await manager_service.get_active_managers()
        
        if not managers_list:
            await message.answer(
                "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏**\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
                ])
            )
            return
        
        text = f"üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ ({len(managers_list)})**\n\n"
        
        for mgr in managers_list[:10]:
            status_emoji = {"online": "üü¢", "busy": "üü°", "offline": "üî¥"}.get(mgr.status.value, "‚ö™")
            admin_badge = "üëë" if mgr.is_admin else ""
            
            text += f"{status_emoji} **{mgr.first_name}** {admin_badge}\n"
            text += f"   ID: {mgr.telegram_id}\n"
            text += f"   –ó–∞—è–≤–æ–∫: {mgr.total_applications}\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {mgr.status.value}\n\n"
        
        if len(managers_list) > 10:
            text += f"... –∏ –µ—â–µ {len(managers_list) - 10} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="managers_stats")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_managers")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /managers: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /reports - –ù–û–í–ê–Ø
@base_router.message(Command("reports"))
async def cmd_reports(message: Message):
    """–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager or not manager.is_admin:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        system_stats = await manager_service.get_system_stats()
        
        reports_text = f"""
üìà **–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**

üìä **–¢–µ–∫—É—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {system_stats['total_managers']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {system_stats['online_managers']}
‚Ä¢ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {system_stats['today_applications']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ —á–∞—Å: {system_stats['hour_completed']}

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:**
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç", callback_data="report_daily")],
            [InlineKeyboardButton(text="üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_weekly")],
            [InlineKeyboardButton(text="üë• –û—Ç—á–µ—Ç –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º", callback_data="report_managers")],
            [InlineKeyboardButton(text="üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º", callback_data="report_applications")],
            [InlineKeyboardButton(text="üí¨ –û—Ç—á–µ—Ç –ø–æ —á–∞—Ç–∞–º", callback_data="report_chats")],
            [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        
        await message.answer(reports_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /reports: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /help
@base_router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    user = message.from_user
    telegram_id = int(user.id)
    
    manager = await manager_service.get_manager_by_telegram_id(telegram_id)
    if not manager:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return
    
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/online - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É
/offline - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–†–∞–±–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
/applications - –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
/chats - –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
/status - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    """
    
    if manager.is_admin:
        help_text += """
**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/managers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
/reports - –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        """
    
    help_text += """
**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /online –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
2. –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
3. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /offline –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@base_router.callback_query(F.data == "confirm_offline")
async def callback_confirm_offline(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        success = await manager_service.end_work_session(telegram_id)
        
        if success:
            await callback.message.edit_text(
                f"üî¥ **–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                f"–î–æ –≤—Å—Ç—Ä–µ—á–∏, {manager.first_name}! üëã\n"
                f"–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /online",
                reply_markup=get_manager_main_keyboard(manager.is_admin, "offline")
            )
            await state.set_state(ManagerStates.OFFLINE)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@base_router.callback_query(F.data == "cancel_offline")
async def callback_cancel_offline(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã"""
    await callback.message.edit_text("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å –æ–Ω–ª–∞–π–Ω.")

@base_router.callback_query(F.data == "refresh_stats")
async def callback_refresh_stats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    await cmd_stats(callback.message)
    await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

# –î–û–ë–ê–í–õ–Ø–Æ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:

@base_router.callback_query(F.data == "go_online")
async def callback_go_online(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        success = await manager_service.start_work_session(telegram_id)
        if success:
            await callback.message.edit_text(
                f"üü¢ **–í—ã –≤ —Å–µ—Ç–∏!**\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, {manager.first_name}! –í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏ —á–∞—Ç—ã.\n"
                f"–ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {manager.max_active_chats}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_manager_main_keyboard(manager.is_admin, "online")
            )
            await state.set_state(ManagerStates.ONLINE)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–Ω–ª–∞–π–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –æ–Ω–ª–∞–π–Ω: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@base_router.callback_query(F.data == "go_offline")
async def callback_go_offline(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Ñ–ª–∞–π–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        active_chats = await redis_service.get_manager_active_chats(str(telegram_id))
        
        if active_chats:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", callback_data="confirm_offline")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offline")]
            ])
            
            await callback.message.edit_text(
                f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n"
                f"–£ –≤–∞—Å –µ—Å—Ç—å {len(active_chats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞(–æ–≤).\n"
                f"–ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É?",
                reply_markup=keyboard
            )
        else:
            success = await manager_service.end_work_session(telegram_id)
            if success:
                await callback.message.edit_text(
                    f"üî¥ **–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                    f"–î–æ –≤—Å—Ç—Ä–µ—á–∏, {manager.first_name}! üëã\n"
                    f"–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /online",
                    reply_markup=get_manager_main_keyboard(manager.is_admin, "offline")
                )
                await state.set_state(ManagerStates.OFFLINE)
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –æ—Ñ–ª–∞–π–Ω: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@base_router.callback_query(F.data == "show_stats")
async def callback_show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        stats = await manager_service.get_manager_stats(telegram_id)
        if not stats:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
            return
        
        status_emoji = {"online": "üü¢", "busy": "üü°", "offline": "üî¥"}.get(stats['status'], "‚ö™")
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã**

üë§ **–ú–µ–Ω–µ–¥–∂–µ—Ä:** {stats['manager_name']}
{status_emoji} **–°—Ç–∞—Ç—É—Å:** {stats['status'].upper()}

üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:** {stats['active_chats']}/{stats['max_chats']}
üìã **–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:** {stats['total_applications']}
üìà **–ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è:** {stats['today_applications']}

‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {stats['avg_response_time']}—Å
üïê **–ß–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é:** {stats['week_work_hours']}—á

üìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {stats['last_seen'][:19] if stats['last_seen'] else '–ù–∏–∫–æ–≥–¥–∞'}
        """
        
        await callback.message.edit_text(stats_text, reply_markup=get_stats_keyboard())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@base_router.callback_query(F.data == "active_chats")
async def callback_active_chats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        active_chats = await redis_service.get_manager_active_chats(str(telegram_id))
        
        if not active_chats:
            await callback.message.edit_text(
                "üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã**\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.\n"
                "–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return
        
        text = f"üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(active_chats)}/{manager.max_active_chats})**\n\n"
        
        for chat_id in active_chats[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ Redis
            text += f"üî∏ –ß–∞—Ç #{chat_id}\n"
        
        if len(active_chats) > 5:
            text += f"\n... –∏ –µ—â–µ {len(active_chats) - 5} —á–∞—Ç–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="active_chats")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@base_router.callback_query(F.data == "detailed_stats")
async def callback_detailed_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await manager_service.get_manager_detailed_stats(telegram_id)
        
        if not stats:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
            return
        
        detailed_text = f"""
üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ **{stats['manager_name']}**

üìä **–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_applications']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_applications']}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {stats['cancelled_applications']}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']}%

üìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:**
‚Ä¢ –ó–∞—è–≤–æ–∫: {stats['month_applications']}
‚Ä¢ –ß–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã: {stats['month_work_hours']}—á
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']}—Å

üèÜ **–†–µ–π—Ç–∏–Ω–≥:**
‚Ä¢ –ú–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['rank']}/{stats['total_managers']}
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['client_rating']}/5.0
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û–±—ã—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(detailed_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@base_router.callback_query(F.data == "back_to_main")
async def callback_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        stats = await manager_service.get_manager_stats(telegram_id)
        status_emoji = {"online": "üü¢", "busy": "üü°", "offline": "üî¥"}.get(manager.status.value, "‚ö™")
        
        welcome_text = f"""
üëã **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {manager.first_name}!**

{status_emoji} –°—Ç–∞—Ç—É—Å: {manager.status.value.upper()}
üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_chats'] if stats else 0}/{manager.max_active_chats}
üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_applications'] if stats else 0}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = get_manager_main_keyboard(manager.is_admin, manager.status.value)
        await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@base_router.callback_query(F.data == "admin_panel")
async def callback_admin_panel(callback: CallbackQuery):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager or not manager.is_admin:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        system_stats = await manager_service.get_system_stats()
        
        admin_text = f"""
‚öôÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {system_stats['total_managers']}
‚Ä¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {system_stats['online_managers']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {system_stats['active_chats']}
‚Ä¢ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {system_stats['today_applications']}

üîÑ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:**
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {system_stats['hour_applications']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {system_stats['hour_completed']}
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏", callback_data="applications_menu")],
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", callback_data="manage_managers")],
            [InlineKeyboardButton(text="üìà –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(admin_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ admin callback handlers
@base_router.callback_query(F.data == "manage_managers")
async def callback_manage_managers(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏"""
    await cmd_managers(callback.message)
    await callback.answer()

@base_router.callback_query(F.data == "admin_reports")
async def callback_admin_reports(callback: CallbackQuery):
    """–û—Ç—á–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await cmd_reports(callback.message)
    await callback.answer()



@base_router.callback_query(F.data == "refresh_admin")
async def callback_refresh_admin(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await cmd_admin(callback.message)
    await callback.answer("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

@base_router.callback_query(F.data == "admin_panel")
async def callback_admin_panel_return(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await cmd_admin(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /chats
@base_router.callback_query(F.data == "refresh_chats")
async def callback_refresh_chats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    await cmd_chats(callback.message)
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /status
@base_router.callback_query(F.data == "set_status_online")
async def callback_set_status_online(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        success = await manager_service.set_manager_status(telegram_id, ManagerStatus.ONLINE)
        if success:
            await callback.message.edit_text(
                "üü¢ **–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –û–ù–õ–ê–ô–ù**\n\n"
                "–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –∏ —á–∞—Ç—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@base_router.callback_query(F.data == "set_status_busy")
async def callback_set_status_busy(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        success = await manager_service.set_manager_status(telegram_id, ManagerStatus.BUSY)
        if success:
            await callback.message.edit_text(
                "üü° **–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –ó–ê–ù–Ø–¢**\n\n"
                "–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@base_router.callback_query(F.data == "set_status_offline")
async def callback_set_status_offline(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ñ–ª–∞–π–Ω"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        success = await manager_service.set_manager_status(telegram_id, ManagerStatus.OFFLINE)
        if success:
            await callback.message.edit_text(
                "üî¥ **–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –û–§–õ–ê–ô–ù**\n\n"
                "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /managers
@base_router.callback_query(F.data == "managers_stats")
async def callback_managers_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager or not manager.is_admin:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        managers_list = await manager_service.get_active_managers()
        
        stats_text = "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤**\n\n"
        
        total_applications = 0
        online_count = 0
        
        for mgr in managers_list:
            total_applications += mgr.total_applications
            if mgr.status == ManagerStatus.ONLINE:
                online_count += 1
        
        stats_text += f"**–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(managers_list)}\n"
        stats_text += f"‚Ä¢ –û–Ω–ª–∞–π–Ω: {online_count}\n"
        stats_text += f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {total_applications}\n"
        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {total_applications // max(len(managers_list), 1)}\n\n"
        
        stats_text += "**–¢–æ–ø-5 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:**\n"
        sorted_managers = sorted(managers_list, key=lambda x: x.total_applications, reverse=True)
        
        for i, mgr in enumerate(sorted_managers[:5], 1):
            status_emoji = {"online": "üü¢", "busy": "üü°", "offline": "üî¥"}.get(mgr.status.value, "‚ö™")
            stats_text += f"{i}. {status_emoji} {mgr.first_name} - {mgr.total_applications} –∑–∞—è–≤–æ–∫\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", callback_data="manage_managers")]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@base_router.callback_query(F.data == "refresh_managers")
async def callback_refresh_managers(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    await cmd_managers(callback.message)
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /reports
@base_router.callback_query(F.data == "report_daily")
async def callback_report_daily(callback: CallbackQuery):
    """–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager or not manager.is_admin:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        system_stats = await manager_service.get_system_stats()
        
        report_text = f"""
üìä **–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç - {datetime.now().strftime('%d.%m.%Y')}**

**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {system_stats['today_applications']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ —á–∞—Å: {system_stats['hour_completed']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {system_stats['online_managers']}
‚Ä¢ –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {system_stats['total_managers']}

**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ~15 –º–∏–Ω (—Å—Ä–µ–¥–Ω–µ–µ)
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: 85%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {system_stats['active_chats']}

**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_weekly")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")]
        ])
        
        await callback.message.edit_text(report_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@base_router.callback_query(F.data == "report_weekly")
async def callback_report_weekly(callback: CallbackQuery):
    """–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    await callback.answer("üìà –§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@base_router.callback_query(F.data == "report_managers")
async def callback_report_managers_detailed(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    await callback_managers_stats(callback)

@base_router.callback_query(F.data == "report_applications")
async def callback_report_applications(callback: CallbackQuery):
    """–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º"""
    await callback.answer("üìã –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—è–≤–∫–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@base_router.callback_query(F.data == "report_chats")
async def callback_report_chats(callback: CallbackQuery):
    """–û—Ç—á–µ—Ç –ø–æ —á–∞—Ç–∞–º"""
    await callback.answer("üí¨ –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —á–∞—Ç–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@base_router.callback_query(F.data == "export_data")
async def callback_export_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    await callback.answer("üìä –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@base_router.callback_query(F.data == "all_applications")
async def callback_all_applications(callback: CallbackQuery):
    """–í—Å–µ –∑–∞—è–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é –∑–∞—è–≤–æ–∫"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager or not manager.is_admin:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é –∑–∞—è–≤–æ–∫
        # –≥–¥–µ —É –Ω–µ–≥–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–¥–µ–ª—É "–í—Å–µ –∑–∞—è–≤–∫–∏ (–ê–¥–º–∏–Ω)"
        await callback.answer("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏...")
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é –∑–∞—è–≤–æ–∫
        from telegram_bot.handlers.application_handlers import callback_applications_menu
        await callback_applications_menu(callback)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_manager_main_keyboard(is_admin: bool = False, manager_status: str = "offline") -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    buttons = []
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if manager_status == "offline":
        buttons.append([InlineKeyboardButton(text="üü¢ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", callback_data="go_online")])
    else:
        buttons.append([InlineKeyboardButton(text="üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", callback_data="go_offline")])
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    buttons.extend([
        [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏", callback_data="applications_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
    ])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin:
        buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_panel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_online_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è, –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ get_manager_main_keyboard)"""
    # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return get_manager_main_keyboard(is_admin, "online")

def get_stats_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stats")],
        [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@base_router.message()
async def handle_unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = message.from_user
    telegram_id = int(user.id)
    
    manager = await manager_service.get_manager_by_telegram_id(telegram_id)
    if not manager:
        await message.answer(
            "ü§ñ –≠—Ç–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ILPO-TAXI –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫—É, –ø–æ—Å–µ—Ç–∏—Ç–µ: https://ilpo-taxi.top"
        )
        return
    
    await message.answer(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    ) 