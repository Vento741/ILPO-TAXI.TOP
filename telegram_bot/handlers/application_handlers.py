"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
"""
import logging
import html
from typing import List, Optional
from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from telegram_bot.services.manager_service import manager_service
from telegram_bot.models.support_models import Application, ApplicationStatus, Manager
from telegram_bot.models.database import AsyncSessionLocal
from telegram_bot.config.settings import settings

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞—è–≤–æ–∫
application_router = Router()

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@application_router.message(Command("test"))
async def cmd_test(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    await message.answer("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! Application router –∞–∫—Ç–∏–≤–µ–Ω.", parse_mode=ParseMode.HTML)

@application_router.message(Command("applications"))
async def cmd_applications(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", parse_mode=ParseMode.HTML)
            return
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –∑–∞—è–≤–æ–∫
        keyboard_buttons = [
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")],
            [InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="new_applications")],
            [InlineKeyboardButton(text="‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", callback_data="in_progress_applications")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="completed_applications")]
        ]
        
        if manager.is_admin:
            keyboard_buttons.append([
                InlineKeyboardButton(text="üóÇÔ∏è –í—Å–µ –∑–∞—è–≤–∫–∏ (–ê–¥–º–∏–Ω)", callback_data="all_applications")
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(
            "<b>üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∑–∞—è–≤–æ–∫: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.", parse_mode=ParseMode.HTML)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ callback
async def process_applications_callback(
    callback: CallbackQuery, 
    status: Optional[ApplicationStatus] = None,
    page: int = 1,
    show_all: bool = False
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ callback
    
    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        status: –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        show_all: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ (–∫–∞–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    """
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", show_alert=True)
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        offset = (page - 1) * per_page
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        applications = await manager_service.get_manager_applications(
            telegram_id, 
            status=status, 
            limit=per_page, 
            offset=offset,
            show_all=show_all
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        all_applications = await manager_service.get_manager_applications(
            telegram_id, 
            status=status,
            limit=1000,  # –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
            show_all=show_all
        )
        total_applications = len(all_applications)
        total_pages = (total_applications + per_page - 1) // per_page  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        
        if not applications:
            try:
                status_text = "–í–∞—à–∏" if status is None else {
                    ApplicationStatus.NEW: "–ù–æ–≤—ã–µ",
                    ApplicationStatus.ASSIGNED: "–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ",
                    ApplicationStatus.IN_PROGRESS: "–í —Ä–∞–±–æ—Ç–µ",
                    ApplicationStatus.COMPLETED: "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"
                }.get(status, "")
                
                await callback.message.edit_text(
                    f"üìã <b>{status_text} –∑–∞—è–≤–∫–∏</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                    reply_markup=get_applications_empty_keyboard(),
                    parse_mode=ParseMode.HTML
                )
            except Exception as edit_error:
                if "message is not modified" in str(edit_error):
                    await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
                else:
                    raise edit_error
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        status_text_map = {
            ApplicationStatus.NEW: "–ù–æ–≤—ã–µ",
            ApplicationStatus.ASSIGNED: "–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ",
            ApplicationStatus.IN_PROGRESS: "–í —Ä–∞–±–æ—Ç–µ",
            ApplicationStatus.COMPLETED: "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"
        }
        status_header = "–í—Å–µ" if show_all else status_text_map.get(status, "–í–∞—à–∏")
        
        text = f"<b>üìã {status_header} –∑–∞—è–≤–∫–∏ (—Å—Ç—Ä. {page}/{total_pages}):</b>\n\n"
        
        for app in applications:
            status_emoji = get_status_emoji(app.status)
            category_text = get_category_text(app.category)
            
            text += f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{app.id}</b>\n"
            text += f"üë§ {html.escape(app.full_name)}\n"
            text += f"üì± <code>{html.escape(app.phone)}</code>\n"
            text += f"üèôÔ∏è {html.escape(app.city)}\n"
            text += f"{category_text}\n" # –≠–º–æ–¥–∑–∏ —É–∂–µ –≤ category_text
            text += f"üìÖ {app.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ —Ä–∞–∑–Ω—ã–º
        current_time = datetime.utcnow().strftime('%H:%M:%S')
        text += f"\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard_buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫
        for app in applications:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"#{app.id} - {app.full_name} ({get_status_emoji(app.status)})",
                    callback_data=f"app_details_{app.id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        page_code = get_status_code(status, show_all)

        if page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page_code}_{page-1}")
            )
        
        if page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_{page_code}_{page+1}")
            )
        
        if pagination_buttons:
            keyboard_buttons.append(pagination_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        refresh_code = get_status_code(status, show_all)
        keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{refresh_code}")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="applications_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as edit_error:
            if "message is not modified" in str(edit_error):
                await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
            else:
                raise edit_error
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.", show_alert=True)

def get_status_code(status: Optional[ApplicationStatus], show_all: bool = False) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback_data"""
    if status is None:
        return "all_admin" if show_all else "my"
    
    return {
        ApplicationStatus.NEW: "new",
        ApplicationStatus.ASSIGNED: "assigned",
        ApplicationStatus.IN_PROGRESS: "in_progress",
        ApplicationStatus.COMPLETED: "completed",
        ApplicationStatus.WAITING_CLIENT: "waiting",
        ApplicationStatus.CANCELLED: "cancelled"
    }.get(status, "my")

@application_router.callback_query(F.data == "my_applications")
async def callback_my_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏"""
    await process_applications_callback(callback)

@application_router.callback_query(F.data == "new_applications")
async def callback_new_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"""
    await process_applications_callback(callback, status=ApplicationStatus.NEW)

@application_router.callback_query(F.data == "assigned_applications")
async def callback_assigned_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    await process_applications_callback(callback, status=ApplicationStatus.ASSIGNED)

@application_router.callback_query(F.data == "in_progress_applications")
async def callback_in_progress_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ"""
    await process_applications_callback(callback, status=ApplicationStatus.IN_PROGRESS)

@application_router.callback_query(F.data == "completed_applications")
async def callback_completed_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    await process_applications_callback(callback, status=ApplicationStatus.COMPLETED)

@application_router.callback_query(F.data.startswith("app_details_"))
async def callback_application_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ ID"""
    app_id = int(callback.data.split("_")[2])
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Application)
                .options(selectinload(Application.assigned_manager))
                .where(Application.id == app_id)
            )
            application = result.scalars().first()
            
            if not application:
                await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            text = format_application_details(application)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π
            is_assigned_to_current_manager = application.assigned_manager_id == manager.id
            is_new = application.status == ApplicationStatus.NEW and not application.assigned_manager_id
            is_in_progress_by_current_manager = is_assigned_to_current_manager and application.status in [
                ApplicationStatus.ASSIGNED, 
                ApplicationStatus.IN_PROGRESS
            ]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" –¥–ª—è –Ω–æ–≤—ã—Ö, —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            if is_new or (manager.is_admin and not application.assigned_manager_id):
                keyboard_buttons.append([
                    InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{app_id}")
                ])
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ —É –¢–ï–ö–£–©–ï–ì–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if is_in_progress_by_current_manager:
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"app_contact_{app_id}")
                ])
                keyboard_buttons.append([
                    InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"app_complete_{app_id}")
                ])
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"app_note_{app_id}")
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="applications_menu")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏.", show_alert=True)


@application_router.callback_query(F.data.startswith("app_contact_"))
async def callback_application_contact(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
    app_id = int(callback.data.split("_")[2])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        async with AsyncSessionLocal() as session:
            application = await session.get(Application, app_id)
            if not application or not application.phone:
                await callback.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_number = ''.join(filter(str.isdigit, application.phone))
        # –î–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å—Å—ã–ª–æ–∫
        if len(phone_number) == 11 and phone_number.startswith('8'):
            phone_number = '7' + phone_number[1:]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url=f"tg://resolve?phone={phone_number}")],
            [InlineKeyboardButton(text="üü¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp", url=f"https://wa.me/{phone_number}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ", callback_data=f"app_details_{app_id}")]
        ])
        
        text = (
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º:</b>\n\n"
            f"<b>–ò–º—è:</b> {html.escape(application.full_name)}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href=\"tel:+{phone_number}\">{html.escape(application.phone)}</a>"
        )

        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∫ –∑–∞—è–≤–∫–∞–º
@application_router.callback_query(F.data.startswith("app_note_"))
async def callback_application_note(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞—è–≤–∫–µ"""
    app_id = int(callback.data.split("_")[2])
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", show_alert=True)
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å FSM –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await callback.message.edit_text(
            f"üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞—è–≤–∫–µ #{app_id}</b>\n\n"
            f"–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–æ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ", callback_data=f"app_details_{app_id}")]
            ]),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@application_router.callback_query(F.data.startswith("app_"))
async def callback_application_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏"""
    data = callback.data.split("_")
    action = data[1]
    app_id = int(data[2])
    
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", show_alert=True)
            return
        
        if action == "take":
            # –í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
            success = await manager_service.assign_application_to_manager(app_id, telegram_id)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                async with AsyncSessionLocal() as session:
                    result = await session.execute(
                        select(Application)
                        .options(selectinload(Application.assigned_manager))
                        .where(Application.id == app_id)
                    )
                    application = result.scalars().first()
                    
                    if application:
                        text = f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
                        text += format_application_details(application)
                        
                        keyboard = get_taken_application_keyboard(app_id)
                        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã)
                        await notify_client_about_assignment(application, manager)
                    else:
                        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –µ—ë —É–∂–µ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä.", show_alert=True)
        
        elif action == "complete":
            # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É
            async with AsyncSessionLocal() as session:
                application = await session.get(Application, app_id)
                
                if application and application.assigned_manager_id == manager.id:
                    application.status = ApplicationStatus.COMPLETED
                    application.processed_at = datetime.utcnow()
                    await session.commit()
                    
                    text = f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{app_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    text += "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! üëç"
                    
                    await callback.message.edit_text(text, reply_markup=get_completed_application_keyboard(), parse_mode=ParseMode.HTML)
                    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                else:
                    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º.", show_alert=True)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@application_router.callback_query(F.data == "all_applications")
async def callback_all_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    await process_applications_callback(callback, show_all=True)

@application_router.callback_query(F.data == "applications_menu")
async def callback_applications_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞—è–≤–æ–∫"""
    telegram_id = callback.from_user.id
    manager = await manager_service.get_manager_by_telegram_id(telegram_id)
    
    if not manager:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", show_alert=True)
        return
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –∑–∞—è–≤–æ–∫
    keyboard_buttons = [
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")],
        [InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="new_applications")],
        [InlineKeyboardButton(text="‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", callback_data="in_progress_applications")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="completed_applications")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if manager.is_admin:
        keyboard_buttons.append([
            InlineKeyboardButton(text="üóÇÔ∏è –í—Å–µ –∑–∞—è–≤–∫–∏ (–ê–¥–º–∏–Ω)", callback_data="all_applications")
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    try:
        await callback.message.edit_text(
            "<b>üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("‚úÖ –ú–µ–Ω—é –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∑–∞—è–≤–æ–∫: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@application_router.callback_query(F.data.startswith("page_"))
async def callback_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∑–∞—è–≤–æ–∫"""
    data_parts = callback.data.split("_")
    
    # –§–æ—Ä–º–∞—Ç: page_STATUS_–ù–û–ú–ï–†
    if len(data_parts) < 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)
        return
    
    status_code = data_parts[1]
    page = int(data_parts[2])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –∫–æ–¥—É
    status_map = {
        "new": ApplicationStatus.NEW,
        "assigned": ApplicationStatus.ASSIGNED,
        "in_progress": ApplicationStatus.IN_PROGRESS,
        "completed": ApplicationStatus.COMPLETED,
        "waiting": ApplicationStatus.WAITING_CLIENT,
        "cancelled": ApplicationStatus.CANCELLED,
        "my": None,
        "all_admin": None
    }
    
    show_all = status_code == "all_admin"
    status = status_map.get(status_code)
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    await process_applications_callback(callback, status=status, page=page, show_all=show_all)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
@application_router.callback_query(F.data.startswith("refresh_"))
async def callback_refresh_by_status(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"""
    status_code = callback.data.split("_")[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –∫–æ–¥—É
    status_map = {
        "new": ApplicationStatus.NEW,
        "assigned": ApplicationStatus.ASSIGNED,
        "in_progress": ApplicationStatus.IN_PROGRESS,
        "completed": ApplicationStatus.COMPLETED,
        "waiting": ApplicationStatus.WAITING_CLIENT,
        "cancelled": ApplicationStatus.CANCELLED,
        "my": None,
        "all_admin": None
    }
    
    status = status_map.get(status_code)
    show_all = status_code == "all_admin"
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    await process_applications_callback(callback, status=status, show_all=show_all)

def format_application_details(application: Application) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML."""

    def h(text: Optional[str]) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Ç–µ–≥–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if text is None:
            return ""
        return html.escape(str(text))

    # --- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ---
    citizenship_map = {
        "rf": "üá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§",
        "eaeu": "üåê –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –ï–ê–≠–°",
        "other": "üåç –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã"
    }
    work_status_map = {
        "self_employed": "üíº –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π (4-6% –Ω–∞–ª–æ–≥)",
        "park_self_employed": "üè¢ –ü–∞—Ä–∫–æ–≤–∞—è —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å (+10 –±–∞–ª–ª–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)",
        "ip": "üìä –ò–ü (–£–°–ù 6%)",
        "employee": "üìù –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä",
        "not_sure": "‚ùì –ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è (–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)"
    }
    schedule_map = {
        "full_time": "‚è∞ –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å (8+ —á–∞—Å–æ–≤)",
        "part_time": "üïê –ù–µ–ø–æ–ª–Ω—ã–π –¥–µ–Ω—å (4-8 —á–∞—Å–æ–≤)",
        "weekends": "üìÖ –¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ",
        "evenings": "üåÉ –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã",
        "flexible": "üîÑ –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫"
    }
    license_map = {
        "yes": "‚úÖ –ï—Å—Ç—å",
        "getting": "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è",
        "no": "‚ùå –ù–µ—Ç"
    }
    car_map = {
        "own": "üöó –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π",
        "rent": "üîë –ê—Ä–µ–Ω–¥–∞",
        "no": "‚ùå –ù–µ—Ç"
    }
    car_class_map = {
        "economy": "üí∞ –≠–∫–æ–Ω–æ–º (Lada, KIA Rio, Hyundai Solaris)",
        "comfort": "‚≠ê –ö–æ–º—Ñ–æ—Ä—Ç (VW Polo, Skoda Rapid, KIA Cerato)",
        "comfort_plus": "‚≠ê‚≠ê –ö–æ–º—Ñ–æ—Ä—Ç+ (Toyota Camry, KIA Optima)",
        "business": "üíé –ë–∏–∑–Ω–µ—Å (BMW 5, Mercedes E, Audi A6)"
    }
    permit_map = {
        "yes": "‚úÖ –ï—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–∞–∫—Å–∏",
        "getting": "‚è≥ –û—Ñ–æ—Ä–º–ª—è—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
        "no": "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
        "help_needed": "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏"
    }
    experience_map = {
        "no_experience": "üÜï –ù–µ—Ç –æ–ø—ã—Ç–∞ –≤ —Ç–∞–∫—Å–∏/–¥–æ—Å—Ç–∞–≤–∫–µ",
        "less_year": "ü•â –ú–µ–Ω–µ–µ –≥–æ–¥–∞",
        "1_3_years": "ü•à 1-3 –≥–æ–¥–∞",
        "3_5_years": "ü•á 3-5 –ª–µ—Ç",
        "more_5_years": "üèÜ –ë–æ–ª–µ–µ 5 –ª–µ—Ç"
    }
    doc_map = {
        "passport": "üÜî –ü–∞—Å–ø–æ—Ä—Ç",
        "driver_license": "üöó –í–æ–¥. —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
        "snils": "üìÑ –°–ù–ò–õ–°",
        "inn": "üìä –ò–ù–ù",
        "car_docs": "üöô –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –∞–≤—Ç–æ",
        "medical_cert": "ü©∫ –ú–µ–¥. —Å–ø—Ä–∞–≤–∫–∞",
        "work_permit": "üõÇ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É"
    }
    status_map = {
        "new": "üÜï –ù–æ–≤–∞—è", "assigned": "üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞", "in_progress": "‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ",
        "waiting_client": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞", "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
    }
    transport_map = {
        "foot": "üö∂ –ü–µ—à–∏–π –∫—É—Ä—å–µ—Ä", "bike": "üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥", "scooter": "üõ¥ –≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç",
        "motorcycle": "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª/—Å–∫—É—Ç–µ—Ä", "car": "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å"
    }
    thermo_bag_map = {
        "yes": "‚úÖ –ï—Å—Ç—å —Ç–µ—Ä–º–æ—Å—É–º–∫–∞", "buying": "üõí –ü–ª–∞–Ω–∏—Ä—É—é –∫—É–ø–∏—Ç—å",
        "rent": "üîë –ë—É–¥—É –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", "no": "‚ùå –ù–µ—Ç —Ç–µ—Ä–º–æ—Å—É–º–∫–∏"
    }
    time_map = {
        "9-12": "üåÖ 09:00-12:00", "12-15": "‚òÄÔ∏è 12:00-15:00",
        "15-18": "üåá 15:00-18:00", "18-21": "üåÉ 18:00-21:00",
        "any": "üïê –õ—é–±–æ–µ –≤—Ä–µ–º—è"
    }
    med_cert_map = {
        "yes": "‚úÖ –ï—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è", "expired": "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞",
        "no": "‚ùå –ù–µ—Ç", "help_needed": "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
    }

    def format_bool(value: Optional[bool]) -> str:
        if value is None: return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        return "‚úÖ –î–∞" if value else "‚ùå –ù–µ—Ç"

    def format_list(items: Optional[list], item_map: dict) -> str:
        if not items: return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        return ", ".join([item_map.get(item, h(item)) for item in items])

    status_emoji = get_status_emoji(application.status)
    category_text = get_category_text(application.category)
    
    text = f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{application.id}</b>\n\n"
    
    # --- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---
    text += "üë§ <b>–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n"
    text += f"  ‚Ä¢ <b>–ò–º—è:</b> {h(application.full_name)}\n"
    text += f"  ‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{h(application.phone)}</code>\n"
    if application.email:
        text += f"  ‚Ä¢ <b>Email:</b> {h(application.email)}\n"
    text += f"  ‚Ä¢ <b>–ì–æ—Ä–æ–¥:</b> {h(application.city)}\n"
    if application.age:
        text += f"  ‚Ä¢ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {h(str(application.age))} –ª–µ—Ç\n"
    if application.citizenship:
        text += f"  ‚Ä¢ <b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {citizenship_map.get(application.citizenship, h(application.citizenship))}\n"

    # --- –†–∞–±–æ—á–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ---
    text += "\nüóì <b>–†–ê–ë–û–ß–ò–ï –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø:</b>\n"
    if application.work_status:
        text += f"  ‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> {work_status_map.get(application.work_status, h(application.work_status))}\n"
    if application.work_schedule:
        text += f"  ‚Ä¢ <b>–ì—Ä–∞—Ñ–∏–∫:</b> {schedule_map.get(application.work_schedule, h(application.work_schedule))}\n"
    if application.preferred_time:
        text += f"  ‚Ä¢ <b>–í—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞:</b> {time_map.get(application.preferred_time, h(application.preferred_time))}\n"

    # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π ---
    if application.category in ['driver', 'both', 'cargo']:
        text += f"\nüöó <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–û–î–ò–¢–ï–õ–ï:</b>\n"
        if application.experience:
            text += f"  ‚Ä¢ <b>–°—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è:</b> {h(application.experience)} –ª–µ—Ç\n"
        if application.has_driver_license:
            text += f"  ‚Ä¢ <b>–ü—Ä–∞–≤–∞:</b> {license_map.get(application.has_driver_license, h(application.has_driver_license))}\n"
        if application.has_car:
            text += f"  ‚Ä¢ <b>–°–≤–æ–π –∞–≤—Ç–æ:</b> {car_map.get(application.has_car, h(application.has_car))}\n"
        if application.car_brand and application.car_model:
            car_year = f" ({application.car_year} –≥.)" if application.car_year else ""
            text += f"  ‚Ä¢ <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {h(application.car_brand)} {h(application.car_model)}{h(car_year)}\n"
        if application.car_class:
            text += f"  ‚Ä¢ <b>–ñ–µ–ª–∞–µ–º—ã–π –∫–ª–∞—Å—Å:</b> {car_class_map.get(application.car_class, h(application.car_class))}\n"
        if application.has_taxi_permit:
            text += f"  ‚Ä¢ <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–∫—Å–∏:</b> {permit_map.get(application.has_taxi_permit, h(application.has_taxi_permit))}\n"

    # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ ---
    if application.category in ['courier', 'both']:
        text += f"\nüì¶ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–£–†–¨–ï–†–ï:</b>\n"
        if application.transport:
            text += f"  ‚Ä¢ <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</b> {transport_map.get(application.transport, h(application.transport))}\n"
        if application.has_thermo_bag:
            text += f"  ‚Ä¢ <b>–¢–µ—Ä–º–æ—Å—É–º–∫–∞:</b> {thermo_bag_map.get(application.has_thermo_bag, h(application.has_thermo_bag))}\n"
        if application.courier_license:
             text += f"  ‚Ä¢ <b>–ü—Ä–∞–≤–∞ (–∫—É—Ä—å–µ—Ä):</b> {license_map.get(application.courier_license, h(application.courier_license))}\n"
    
    # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö ---
    if application.category == 'cargo':
        text += f"\nüöõ <b>–ì–†–£–ó–û–í–´–ï –ü–ï–†–ï–í–û–ó–ö–ò:</b>\n"
        if application.load_capacity:
            text += f"  ‚Ä¢ <b>–ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å:</b> {h(application.load_capacity)}\n"
        if application.truck_type:
            text += f"  ‚Ä¢ <b>–¢–∏–ø –∫—É–∑–æ–≤–∞:</b> {h(application.truck_type)}\n"
        if application.cargo_license:
            text += f"  ‚Ä¢ <b>–ü—Ä–∞–≤–∞ (–≥—Ä—É–∑–æ–≤—ã–µ):</b> {h(application.cargo_license)}\n"

    # --- –û–ø—ã—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ---
    text += "\nüóÇ <b>–û–ü–´–¢ –ò –î–û–ö–£–ú–ï–ù–¢–´:</b>\n"
    if application.work_experience:
        text += f"  ‚Ä¢ <b>–û–ø—ã—Ç –≤ —Å—Ñ–µ—Ä–µ:</b> {experience_map.get(application.work_experience, h(application.work_experience))}\n"
    if application.previous_platforms:
        text += f"  ‚Ä¢ <b>–†–∞–±–æ—Ç–∞–ª –≤:</b> {h(application.previous_platforms)}\n"
    if application.has_medical_cert:
        text += f"  ‚Ä¢ <b>–ú–µ–¥. —Å–ø—Ä–∞–≤–∫–∞:</b> {med_cert_map.get(application.has_medical_cert, h(application.has_medical_cert))}\n"
    if application.available_documents:
        text += f"  ‚Ä¢ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b> {format_list(application.available_documents, doc_map)}\n"
    
    # --- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞ ---
    if application.comments:
        text += f"\nüí¨ <b>–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö–õ–ò–ï–ù–¢–ê:</b>\n<i>{h(application.comments)}</i>\n"
    
    # --- –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---
    text += f"\n- - - - - - - - - - - - - - - - - -\n"
    text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_map.get(application.status.value, h(application.status.value.upper()))}\n"
    text += f"<b>–ü–æ–¥–∞–Ω–∞:</b> {application.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    if application.processed_at:
        text += f"<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞:</b> {application.processed_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    if application.assigned_manager:
        text += f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {h(application.assigned_manager.first_name)} {h(application.assigned_manager.last_name or '')}\n"
    else:
        text += f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
    
    # --- –°–æ–≥–ª–∞—Å–∏—è ---
    text += "\n‚öñÔ∏è <b>–°–û–ì–õ–ê–°–ò–Ø:</b>\n"
    text += f"  ‚Ä¢ <b>–ù–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {format_bool(application.has_documents_confirmed)}\n"
    text += f"  ‚Ä¢ <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</b> {format_bool(application.agree_terms)}\n"
    text += f"  ‚Ä¢ <b>–†–∞—Å—Å—ã–ª–∫–∞:</b> {format_bool(application.agree_marketing)}\n"
    
    if application.notes:
        text += f"\nüóí <b>–ó–∞–º–µ—Ç–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n<i>{h(application.notes)}</i>\n"
    
    return text

def get_status_emoji(status: ApplicationStatus) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    status_emojis = {
        ApplicationStatus.NEW: "üÜï",
        ApplicationStatus.ASSIGNED: "üë§",
        ApplicationStatus.IN_PROGRESS: "‚öôÔ∏è",
        ApplicationStatus.WAITING_CLIENT: "‚è≥",
        ApplicationStatus.COMPLETED: "‚úÖ",
        ApplicationStatus.CANCELLED: "‚ùå"
    }
    return status_emojis.get(status, "‚ùì")

def get_category_text(category: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = {
        "driver": "üöó –í–æ–¥–∏—Ç–µ–ª—å",
        "courier": "üì¶ –ö—É—Ä—å–µ—Ä",
        "both": "üöóüì¶ –í–æ–¥–∏—Ç–µ–ª—å –∏ –∫—É—Ä—å–µ—Ä",
        "cargo": "üöõ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"
    }
    return categories.get(category, category)



def get_applications_empty_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_applications")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏", callback_data="applications_menu")]
    ])

def get_taken_application_keyboard(app_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑—è—Ç–æ–π –≤ —Ä–∞–±–æ—Ç—É –∑–∞—è–≤–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"app_complete_{app_id}")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"app_contact_{app_id}")],
        [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"app_note_{app_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏", callback_data="applications_menu")]
    ])

def get_completed_application_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏", callback_data="applications_menu")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

async def notify_client_about_assignment(application: Application, manager):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É SMS –∏–ª–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"üì© –ö–ª–∏–µ–Ω—Ç {application.full_name} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager.first_name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
async def auto_assign_new_applications():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    if not settings.AUTO_ASSIGN_MANAGERS:
        return
    
    try:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
            result = await session.execute(
                select(Application).where(Application.status == ApplicationStatus.NEW)
                .options(selectinload(Application.assigned_manager))
            )
            new_applications = result.scalars().all()
            
            for app in new_applications:
                # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                available_manager = await manager_service.get_available_manager()
                
                if available_manager:
                    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞—è–≤–∫—É
                    success = await manager_service.assign_application_to_manager(
                        app.id, 
                        available_manager.telegram_id
                    )
                    
                    if success:
                        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {available_manager.first_name}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å lazy load –æ—à–∏–±–∫–∏
                        app.assigned_manager = available_manager
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                        await notify_manager_about_new_application(available_manager, app)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")

async def notify_manager_about_new_application(manager, application: Application):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        from aiogram import Bot
        from telegram_bot.config.settings import settings
        
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        
        text = f"""
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º!</b>

{format_application_details(application)}

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"app_details_{application.id}")],
            [InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{application.id}")]
        ])
        
        await bot.send_message(
            chat_id=manager.telegram_id,
            text=text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}") 

@application_router.callback_query(F.data == "next_application")
async def callback_next_application(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        applications = await manager_service.get_available_new_applications(limit=5)
        
        if not applications:
            await callback.answer("üìã –ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –∑–∞—è–≤–∫—É (—Å–ª–µ–¥—É—é—â—É—é)
        if len(applications) > 1:
            app = applications[1]
            text = format_application_details(app)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∑–∞—è–≤–∫–∏
            keyboard_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{app.id}")
            ])
            
            # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞", –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∑–∞—è–≤–∫–∏
            if len(applications) > 2:
                keyboard_buttons.append([
                    InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞", callback_data="next_application")
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="applications_menu")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        else:
            await callback.answer("üìã –≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True) 