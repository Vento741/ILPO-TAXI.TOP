"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
"""
import logging
from typing import List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime

from telegram_bot.services.manager_service import manager_service
from telegram_bot.models.support_models import Application, ApplicationStatus
from telegram_bot.models.database import AsyncSessionLocal
from telegram_bot.config.settings import settings

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞—è–≤–æ–∫
application_router = Router()

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@application_router.message(Command("test"))
async def cmd_test(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    await message.answer("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! Application router –∞–∫—Ç–∏–≤–µ–Ω.")

@application_router.message(Command("applications"))
async def cmd_applications(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    user = message.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É)
        applications = await manager_service.get_manager_applications(telegram_id, limit=10)
        
        if not applications:
            await message.answer(
                "üìã **–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                reply_markup=get_applications_empty_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        text = "üìã **–í–∞—à–∏ –∑–∞—è–≤–∫–∏:**\n\n"
        
        for app in applications:
            status_emoji = get_status_emoji(app.status)
            category_text = get_category_text(app.category)
            
            text += f"{status_emoji} **–ó–∞—è–≤–∫–∞ #{app.id}**\n"
            text += f"üë§ {app.full_name}\n"
            text += f"üì± {app.phone}\n"
            text += f"üèôÔ∏è {app.city}\n"
            text += f"üöó {category_text}\n"
            text += f"üìÖ {app.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await message.answer(text, reply_markup=get_applications_keyboard())
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.")

@application_router.callback_query(F.data == "new_applications")
async def callback_new_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        applications = await manager_service.get_available_new_applications(limit=5)
        
        if not applications:
            try:
                await callback.message.edit_text(
                    "üìã **–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç**\n\n"
                    "–í—Å–µ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.",
                    reply_markup=get_applications_empty_keyboard()
                )
            except Exception as edit_error:
                if "message is not modified" in str(edit_error):
                    await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
                else:
                    raise edit_error
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –¥–µ—Ç–∞–ª—å–Ω–æ
        app = applications[0]
        text = format_application_details(app)
        
        keyboard = get_application_detail_keyboard(app.id, len(applications) > 1)
        
        try:
            await callback.message.edit_text(text, reply_markup=keyboard)
        except Exception as edit_error:
            if "message is not modified" in str(edit_error):
                await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            else:
                raise edit_error
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@application_router.callback_query(F.data.startswith("app_"))
async def callback_application_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏"""
    data = callback.data.split("_")
    action = data[1]
    app_id = int(data[2])
    
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        if action == "take":
            # –í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
            success = await manager_service.assign_application_to_manager(app_id, telegram_id)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                async with AsyncSessionLocal() as session:
                    application = await session.get(Application, app_id)
                    
                    if application:
                        text = f"‚úÖ **–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!**\n\n"
                        text += format_application_details(application)
                        
                        keyboard = get_taken_application_keyboard(app_id)
                        await callback.message.edit_text(text, reply_markup=keyboard)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã)
                        await notify_client_about_assignment(application, manager)
                    else:
                        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –µ—ë —É–∂–µ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä.")
        
        elif action == "details":
            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
            async with AsyncSessionLocal() as session:
                application = await session.get(Application, app_id)
                
                if application:
                    text = format_application_details(application)
                    keyboard = get_application_detail_keyboard(app_id, False)
                    await callback.message.edit_text(text, reply_markup=keyboard)
                else:
                    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        elif action == "complete":
            # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É
            async with AsyncSessionLocal() as session:
                application = await session.get(Application, app_id)
                
                if application and application.assigned_manager_id == manager.id:
                    application.status = ApplicationStatus.COMPLETED
                    application.processed_at = datetime.utcnow()
                    await session.commit()
                    
                    text = f"‚úÖ **–ó–∞—è–≤–∫–∞ #{app_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                    text += "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! üëç"
                    
                    await callback.message.edit_text(text, reply_markup=get_completed_application_keyboard())
                    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                else:
                    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º.")
        
        elif action == "contact":
            # –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º
            async with AsyncSessionLocal() as session:
                application = await session.get(Application, app_id)
                
                if application:
                    contact_text = f"""
üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:**

üë§ **–ò–º—è:** {application.full_name}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {application.phone}
üèôÔ∏è **–ì–æ—Ä–æ–¥:** {application.city}

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp/Telegram.
                    """
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üìû {application.phone}", callback_data=f"phone_{application.id}")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ", callback_data=f"app_details_{app_id}")]
                    ])
                    
                    await callback.message.edit_text(contact_text, reply_markup=keyboard)
                else:
                    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@application_router.callback_query(F.data == "my_applications")
async def callback_my_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏"""
    try:
        await cmd_applications(callback.message)
        await callback.answer()
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –î–û–ë–ê–í–õ–Ø–Æ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ó–ê–Ø–í–û–ö:

@application_router.callback_query(F.data == "in_progress_applications")
async def callback_in_progress_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ
        applications = await manager_service.get_manager_applications(
            telegram_id, 
            status=ApplicationStatus.IN_PROGRESS, 
            limit=10
        )
        
        if not applications:
            try:
                await callback.message.edit_text(
                    "‚öôÔ∏è **–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ**\n\n"
                    "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ.",
                    reply_markup=get_applications_empty_keyboard()
                )
            except Exception as edit_error:
                if "message is not modified" in str(edit_error):
                    await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
                else:
                    raise edit_error
            return
        
        text = "‚öôÔ∏è **–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ:**\n\n"
        
        for app in applications:
            status_emoji = get_status_emoji(app.status)
            category_text = get_category_text(app.category)
            
            text += f"{status_emoji} **–ó–∞—è–≤–∫–∞ #{app.id}**\n"
            text += f"üë§ {app.full_name}\n"
            text += f"üì± {app.phone}\n"
            text += f"üèôÔ∏è {app.city}\n"
            text += f"üöó {category_text}\n"
            text += f"üìÖ {app.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="in_progress_applications")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="my_applications")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ —Ä–∞–∑–Ω—ã–º
            current_time = datetime.utcnow().strftime('%H:%M:%S')
            text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
            
            await callback.message.edit_text(text, reply_markup=keyboard)
        except Exception as edit_error:
            if "message is not modified" in str(edit_error):
                await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
            else:
                raise edit_error
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@application_router.callback_query(F.data == "completed_applications")
async def callback_completed_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        applications = await manager_service.get_manager_applications(
            telegram_id, 
            status=ApplicationStatus.COMPLETED, 
            limit=10
        )
        
        if not applications:
            try:
                await callback.message.edit_text(
                    "‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏**\n\n"
                    "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                    reply_markup=get_applications_empty_keyboard()
                )
            except Exception as edit_error:
                if "message is not modified" in str(edit_error):
                    await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
                else:
                    raise edit_error
            return
        
        text = "‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:**\n\n"
        
        for app in applications:
            status_emoji = get_status_emoji(app.status)
            category_text = get_category_text(app.category)
            
            text += f"{status_emoji} **–ó–∞—è–≤–∫–∞ #{app.id}**\n"
            text += f"üë§ {app.full_name}\n"
            text += f"üì± {app.phone}\n"
            text += f"üèôÔ∏è {app.city}\n"
            text += f"üöó {category_text}\n"
            text += f"üìÖ {app.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="completed_applications")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="my_applications")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ —Ä–∞–∑–Ω—ã–º
            current_time = datetime.utcnow().strftime('%H:%M:%S')
            text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
            
            await callback.message.edit_text(text, reply_markup=keyboard)
        except Exception as edit_error:
            if "message is not modified" in str(edit_error):
                await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
            else:
                raise edit_error
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@application_router.callback_query(F.data == "refresh_applications")
async def callback_refresh_applications(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    try:
        await cmd_applications(callback.message)
        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@application_router.callback_query(F.data == "next_application")
async def callback_next_application(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        applications = await manager_service.get_available_new_applications(limit=5)
        
        if not applications:
            await callback.answer("üìã –ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –∑–∞—è–≤–∫—É (—Å–ª–µ–¥—É—é—â—É—é)
        if len(applications) > 1:
            app = applications[1]
            text = format_application_details(app)
            keyboard = get_application_detail_keyboard(app.id, len(applications) > 2)
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback.answer("üìã –≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∫ –∑–∞—è–≤–∫–∞–º
@application_router.callback_query(F.data.startswith("app_note_"))
async def callback_application_note(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞—è–≤–∫–µ"""
    app_id = int(callback.data.split("_")[2])
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å FSM –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await callback.message.edit_text(
            f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞—è–≤–∫–µ #{app_id}**\n\n"
            f"–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–æ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ", callback_data=f"app_details_{app_id}")]
            ])
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@application_router.callback_query(F.data == "all_applications")
async def callback_all_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    user = callback.from_user
    telegram_id = int(user.id)
    
    try:
        manager = await manager_service.get_manager_by_telegram_id(telegram_id)
        if not manager:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É)
        applications = await manager_service.get_all_applications(limit=15)
        
        if not applications:
            await callback.message.edit_text(
                "üìã **–í—Å–µ –∑–∞—è–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="all_applications")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="my_applications")]
                ])
            )
            return
        
        text = f"üìã **–í—Å–µ –∑–∞—è–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã ({len(applications)})**\n\n"
        
        for app in applications[:10]:
            status_emoji = get_status_emoji(app.status)
            category_text = get_category_text(app.category)
            
            text += f"{status_emoji} **–ó–∞—è–≤–∫–∞ #{app.id}**\n"
            text += f"üë§ {app.full_name}\n"
            text += f"üì± {app.phone}\n"
            text += f"üèôÔ∏è {app.city}\n"
            text += f"üöó {category_text}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
            if app.assigned_manager_id:
                text += f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ù–∞–∑–Ω–∞—á–µ–Ω\n"
            else:
                text += f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
                
            text += f"üìÖ {app.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        if len(applications) > 10:
            text += f"... –∏ –µ—â–µ {len(applications) - 10} –∑–∞—è–≤–æ–∫"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="all_applications")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ —Ä–∞–∑–Ω—ã–º
            current_time = datetime.utcnow().strftime('%H:%M:%S')
            text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
            
            await callback.message.edit_text(text, reply_markup=keyboard)
        except Exception as edit_error:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if "message is not modified" in str(edit_error):
                await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise edit_error
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.")

def format_application_details(application: Application) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ"""
    status_emoji = get_status_emoji(application.status)
    category_text = get_category_text(application.category)
    
    text = f"{status_emoji} **–ó–∞—è–≤–∫–∞ #{application.id}**\n\n"
    text += f"üöó **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_text}\n\n"
    
    text += f"üë§ **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
    text += f"‚Ä¢ –ò–º—è: {application.full_name}\n"
    text += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone}\n"
    text += f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {application.age if application.age else '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç\n"
    text += f"‚Ä¢ –ì–æ—Ä–æ–¥: {application.city}\n"
    if application.email:
        text += f"‚Ä¢ Email: {application.email}\n"
    text += "\n"
    
    # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += f"üöó **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
    
    if application.category in ['driver', 'both', 'cargo']:
        if application.experience:
            text += f"‚Ä¢ –°—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è: {application.experience} –ª–µ—Ç\n"
    
    if application.category in ['courier', 'both']:
        if application.transport:
            transport_map = {
                "foot": "üö∂ –ü–µ—à–∏–π –∫—É—Ä—å–µ—Ä",
                "bike": "üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥", 
                "scooter": "üõ¥ –≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç",
                "motorcycle": "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª/—Å–∫—É—Ç–µ—Ä",
                "car": "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å"
            }
            text += f"‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_map.get(application.transport, application.transport)}\n"
    
    if application.category == 'cargo':
        if application.load_capacity:
            text += f"‚Ä¢ –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å: {application.load_capacity}\n"
    
    text += f"\nüìÖ **–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:** {application.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üìä **–°—Ç–∞—Ç—É—Å:** {application.status.value.upper()}\n"
    
    if application.assigned_manager_id:
        text += f"üë§ **–ú–µ–Ω–µ–¥–∂–µ—Ä:** –ù–∞–∑–Ω–∞—á–µ–Ω\n"
    else:
        text += f"üë§ **–ú–µ–Ω–µ–¥–∂–µ—Ä:** –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
    
    if application.processed_at:
        text += f"‚ö°Ô∏è **–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞:** {application.processed_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    text += f"\nüìù **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
    
    # –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
    if application.citizenship:
        citizenship_map = {
            "rf": "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§",
            "eaeu": "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –ï–ê–≠–°",
            "other": "–î—Ä—É–≥–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ"
        }
        text += f"‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {citizenship_map.get(application.citizenship, application.citizenship)}\n"
    
    # –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
    if application.work_status:
        text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã: {application.work_status}\n"
    
    # –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    if application.has_driver_license:
        text += f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞: {application.has_driver_license}\n"
    
    # –ê–≤—Ç–æ–º–æ–±–∏–ª—å
    if application.has_car:
        text += f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {application.has_car}\n"
    
    # –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å
    if application.car_brand and application.car_model:
        car_year = f" ({application.car_year} –≥.)" if application.car_year else ""
        text += f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {application.car_brand} {application.car_model}{car_year}\n"
    
    # –ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if application.car_class:
        text += f"‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π –∫–ª–∞—Å—Å: {application.car_class}\n"
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–∫—Å–∏
    if application.has_taxi_permit:
        text += f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–∫—Å–∏: {application.has_taxi_permit}\n"
    
    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    if application.work_experience:
        text += f"‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {application.work_experience}\n"
    
    # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if application.previous_platforms:
        text += f"‚Ä¢ –†–∞–±–æ—Ç–∞–ª –≤: {application.previous_platforms}\n"
    
    # –ú–µ–¥—Å–ø—Ä–∞–≤–∫–∞
    if application.has_medical_cert:
        text += f"‚Ä¢ –ú–µ–¥—Å–ø—Ä–∞–≤–∫–∞: {application.has_medical_cert}\n"
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    if application.available_documents:
        if isinstance(application.available_documents, list):
            text += f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(application.available_documents)}\n"
        elif isinstance(application.available_documents, dict):
            text += f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(application.available_documents.values())}\n"
    
    # –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if application.category in ['courier', 'both']:
        if application.delivery_types:
            if isinstance(application.delivery_types, list):
                text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {', '.join(application.delivery_types)}\n"
            elif isinstance(application.delivery_types, dict):
                text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {', '.join(application.delivery_types.values())}\n"
        
        if application.has_thermo_bag:
            text += f"‚Ä¢ –¢–µ—Ä–º–æ—Å—É–º–∫–∞: {application.has_thermo_bag}\n"
    
    # –ì—Ä—É–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏
    if application.category == 'cargo':
        if application.truck_type:
            text += f"‚Ä¢ –¢–∏–ø –∫—É–∑–æ–≤–∞: {application.truck_type}\n"
        if application.cargo_license:
            text += f"‚Ä¢ –ü—Ä–∞–≤–∞: {application.cargo_license}\n"
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
    if application.work_schedule:
        text += f"‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {application.work_schedule}\n"
    
    # –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
    if application.preferred_time:
        text += f"‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {application.preferred_time}\n"
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if application.comments:
        text += f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {application.comments}\n"
    
    # –°–æ–≥–ª–∞—Å–∏—è
    if application.has_documents_confirmed:
        text += f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: –î–∞\n"
    if application.agree_terms:
        text += f"‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏: –î–∞\n"
    if application.agree_marketing:
        text += f"‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: –î–∞\n"
    
    # –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if application.additional_info:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        info_lines = application.additional_info.split('\n')
        for line in info_lines:
            if line.strip():
                text += f"‚Ä¢ {line.strip()}\n"
    
    if application.notes:
        text += f"\nüìù **–ó–∞–º–µ—Ç–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:**\n{application.notes}\n"
    
    return text

def get_status_emoji(status: ApplicationStatus) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    status_emojis = {
        ApplicationStatus.NEW: "üÜï",
        ApplicationStatus.ASSIGNED: "üë§",
        ApplicationStatus.IN_PROGRESS: "‚öôÔ∏è",
        ApplicationStatus.WAITING_CLIENT: "‚è≥",
        ApplicationStatus.COMPLETED: "‚úÖ",
        ApplicationStatus.CANCELLED: "‚ùå"
    }
    return status_emojis.get(status, "‚ùì")

def get_category_text(category: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = {
        "driver": "üöó –í–æ–¥–∏—Ç–µ–ª—å",
        "courier": "üì¶ –ö—É—Ä—å–µ—Ä",
        "both": "üöóüì¶ –í–æ–¥–∏—Ç–µ–ª—å –∏ –∫—É—Ä—å–µ—Ä",
        "cargo": "üöõ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"
    }
    return categories.get(category, category)

def get_applications_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="new_applications")],
        [InlineKeyboardButton(text="‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", callback_data="in_progress_applications")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="completed_applications")],
        [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="all_applications")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_applications")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

def get_applications_empty_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_applications")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

def get_application_detail_keyboard(app_id: int, has_more: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏"""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{app_id}")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"app_contact_{app_id}")],
    ]
    
    if has_more:
        buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞", callback_data="next_application")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="my_applications")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_taken_application_keyboard(app_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑—è—Ç–æ–π –≤ —Ä–∞–±–æ—Ç—É –∑–∞—è–≤–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"app_complete_{app_id}")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"app_contact_{app_id}")],
        [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"app_note_{app_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="my_applications")]
    ])

def get_completed_application_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")],
        [InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="new_applications")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

async def notify_client_about_assignment(application: Application, manager):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É SMS –∏–ª–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"üì© –ö–ª–∏–µ–Ω—Ç {application.full_name} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager.first_name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
async def auto_assign_new_applications():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    if not settings.AUTO_ASSIGN_MANAGERS:
        return
    
    try:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
            from sqlalchemy import select
            result = await session.execute(
                select(Application).where(Application.status == ApplicationStatus.NEW)
            )
            new_applications = result.scalars().all()
            
            for app in new_applications:
                # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                available_manager = await manager_service.get_available_manager()
                
                if available_manager:
                    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞—è–≤–∫—É
                    success = await manager_service.assign_application_to_manager(
                        app.id, 
                        available_manager.telegram_id
                    )
                    
                    if success:
                        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {available_manager.first_name}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                        await notify_manager_about_new_application(available_manager, app)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")

async def notify_manager_about_new_application(manager, application: Application):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        from aiogram import Bot
        from telegram_bot.config.settings import settings
        
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        
        text = f"""
üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º!**

{format_application_details(application)}

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"app_details_{application.id}")],
            [InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{application.id}")]
        ])
        
        await bot.send_message(
            chat_id=manager.telegram_id,
            text=text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}") 